include ../definitions/*

row.padding-top-5x#intro-about
  col.margin-top-3x md=12  
    .text-center
      image src="logo/logo-primary.png"
      h1.margin-top-2x data-revelate="fade out, move y -200"
        span.font-light OPULENT
      h3.font-thin.text-gray.margin-reset data-revelate="fade out, move y 200" DOCUMENTATION
      .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"
      
  
    div
      p
        |Opulent is a templating engine which strives to make page markup as beautiful and expressive as it should be. It's blazing fast, offers useful reusable component definitions and encourages well organised front end code. Opulent provides the cleanliness, readability and development speed you need for your project.
      
row#intro-licensing.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INTRODUCTION
    h2.font-light
      span.text-primary'" LICENSING
      | DETAILS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"
row  
  col xs=12
    p.text-muted data-rev=""
      | Opulent is and will always be free. The MIT License allows every developer to integrate it into their personal or commercial web application. 
        If anyone wants to make changes to Opulent though, we're asking them to share their changes with the world, through the main repository.
        
    .text-center.text-lightgray
      h3.font-thin data-rev=""
        |FOREVER FREE
      .h3.margin-bottom-2x
        fa icon="heart"

row#intro-contributing.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INTRODUCTION
    h2.font-light
      span.text-primary'" CONTRIBUTING
      | GUIDELINES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"
row  
  col xs=12
  
    p.text-muted data-rev=""
      | Bug reports and feature requests are great, but actually fixing the bugs or implementing the features is even better. 
        If you’ve got some code to share with the world, first read the information below, then fork the 
      a'" href="https://github.com/opulent/opulent" Opulent repository 
      | and send a pull request. 
        I will do a code review of your patch, and then chances are good I’ll merge it right in.
    
    p.text-muted 
      | When making a patch, please consider the following:
    ul 
      li Make sure your commit message is properly capitalized and punctuated
      li Add unit tests for the implemented changes
      li Make sure the first line of your commit message is a (short) full sentence
      li Add a note to the changelog 
        span.text-gray'" \ (CHANGELOG.md)
        |describing your change. Feel free to add 
        span.text-gray'" \ (thanks [Your Name](Your Website))
        | at the end
      li 
        | If you're implemented a feature which will influence the workflow, please add a new github issue 
          so I can add it to the documentation on the website.
    
row#installation-getting-started.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INSTALLATION
    h2.font-light
      | GETTING 
      span.text-primary'" STARTED
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | First of all, you will need to make sure you have Ruby and Ruby Gems installed on your system. We recommend using the latest Ruby version available. 
        Opulent is available as a module for most major  web frameworks written in Ruby.
      
    p
      | To install the 
      strong'" opulent gem 
      | run the following command in your terminal:
      
    pre class="brush: ruby"|
      gem install opulent
      
    p
      | To use opulent inside your web application you can add it to your 
      strong' Gemfile
      | .
      
    pre class="brush: ruby"|
      gem "opulent"
      
      
    p
      | Here's how our first web page would look like with opulent. Let's name it 
      code' input.op
      |.
      
    pre class="brush: xml"|
      doctype html 
      html
        head
          title Hello Opulent! 
        body 
          #content
            | This is my first web page
    p
      | To run opulent from the command line, you can use:
      
    pre class="brush: ruby"|
      opulent input.op output.html
      
    p 
      | You can also use Opulent inside any Ruby Application as follows: 
    
    .h4.margin-top-2x
      strong String
      span.text-muted' \ (code input)
    p 
      | When passing a 
      strong'" String
      | to the constructor, the engine will proceed the code generation for the code 
        written inside the string. 
    pre class="brush: ruby" |
      engine = Opulent.new "p Hello opulent!"
      engine.render # => "<p>Hello opulent!</p>"
    
    .h4.margin-top-2x
      strong Symbol
      span.text-muted' \ (path input)
    p 
      | If we pass a
      strong'" Symbol
      | to the constructor, the engine will open the file at the path designated by the Symbol,
        like this: 
      span.text-primary'
        | "#{
        span.text-concrete \ :path
        |}.op"
      |.
    pre class="brush: ruby" |
      engine = Opulent.new :input
      engine.render # => "<html><head>..."
    
      
row#installation-rails.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INSTALLATION
    h2.font-thin
      | RUBY ON 
      span.text-primary'" RAILS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | First you will need to install the 
      strong'" Ruby On Rails
      | implementation of Opulent that can be found in the following gem:
    pre class="brush: ruby"|
      gem install opulent-rails
    p data-rev=""
      | Once it’s installed, all view files with the 
      strong.text-primary'" \ ".html.op" 
      | extension will be compiled using Opulent.
       You can access instance variables in Opulent Templates the same way you do in ERB templates. Helper methods are also available in Opulent templates. For example:

    pre class="brush: ruby" |
      # file: app/controllers/movies_controller.rb

      class MoviesController < ApplicationController
        def index
          @title = "Batman"
        end
      end

    pre class="brush: xml" |
      / file: app/views/layouts/application.html.op
      
      doctype html
      html 
        head 
          title Opulent is singing with Sinatra 
        body 
          =~ yield

    pre class="brush: xml" |
      / file: app/views/movies/index.html.op

      #content
        .title
           h1 = @title
           = link_to 'Home', home_url

    
    .h3.margin-top-2x Rails XSS Protection
    p 
      | Opulent supports Rails’ XSS protection scheme, which was introduced in Rails 2.3.5+ and is enabled by default in 3.0.0+. 
        Like in ERB, all strings printed to a Opulent template are escaped by default. Also like ERB, strings marked as HTML safe 
        are not escaped. Opulent also has its own syntax for printing a raw string to the template using the 
      code' \ ~
      span.text-muted'" \ (tilde)
      | operator.
    
      
row#installation-sinatra.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INSTALLATION
    h2.font-thin
      | SINATRA
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Just like with Rails, you will need to install the 
      strong'" Sinatra
      | implementation of Opulent that can be found in the following gem:
    pre class="brush: ruby"|
      gem install opulent-sinatra
    p data-rev=""
      | Once it’s installed, all view files with the 
      strong.text-primary'" \ ".op" 
      | extension can be compiled using Opulent.
       You can access instance variables in Opulent Templates the same way you do in ERB templates. Helper methods are also available in Opulent templates. For example:

    pre class="brush: ruby" |
      # file: application.rb

      require 'sinatra/base'
      require 'opulent/sinatra'
      
      get '/' do 
        opulent :index
      end 
      

    pre class="brush: xml" |
      / file: views/layout.op
      
      doctype html
      html 
        head 
          title Opulent is singing with Sinatra 
        body 
          =~ yield
           
    pre class="brush: xml" |
      / file: views/index.op
      
      p
        | Hello world!
      
row#installation-tilt.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset INSTALLATION
    h2.font-thin
      span.text-primary" TILT
      | INTERFACE
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Opulent offers a custom Tilt integration by default. You can use it just like you normally use the Tilt gem.

    pre class="brush: ruby" |
      # file: application.rb

      require 'tilt'
      require 'opulent'
      
      template = Tilt.new('views/index.op')
      output = template.render
      
      
row#syntax-nodes-basic.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BASIC
      span.text-primary'" NODES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | The node syntax in opulent is inspired by SASS, and the same principles apply. 
        You have no angular brackets and every parent-child relation is based on indentation.
        The node name given will be the same when rendered to HTML. 
    p data-rev=""
      | There are some special cases where the node name can be missing, 
        and in that case, the implicit node is 
      code'" div 
      | because it is the most widely used. 
    pre class="brush: opulent" |
      div 
      
      / => <div></div>

    pre class="brush: opulent" |
      bread 
        tomato
        ham 
        
      / <bread><tomato></tomato><ham></ham></bread>
      

    p data-rev=""
      | In Opulent the following node names are valid:
      code' lowercase
      |, 
      code' UPPERCASE
      |, 
      code' camelCase
      |, 
      code' snake_case 
      |' and 
      code' hyphen-case  
      |. 
    p
      | The preferred way to name and define nodes in opulent is 
      code' hyphen-case
      |. As a convention, we're going to use hyphen-case throughout the documentation.
    
    pre class="brush: op" |
      validname
      VALIDNAME
      validName
      valid_name
      valid-name
      
row#syntax-nodes-inline.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | INLINE
      span.text-primary'" NODES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | To encourage a compact markup, you can also use the inline operator 
      code'" \>
      | to write a parent-child relation between nodes.
    
    pre class="brush: opulent" |
      ul 
        li > a href="http://pixevil.com" > span Pixevil
      
      / <ul>
      /   <li><a href="http://pixevil.com"><span>Pixevil</span></a></li>
      / </ul>

    p 
      | When having direct children after declaring inline child nodes, the direct 
        children will be inside the last declared inline node.
      
    pre class="brush: opulent" |
      ul 
        li > a href="http://pixevil.com" 
          i.fa.fa-globe
          span Pixevil
      
      / <ul>
      /   <li><a href="http://pixevil.com"><i class="fa fa-globe"></i><span>Pixevil</span></a></li>
      / </ul>
      
row#syntax-nodes-whitespace.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" NODE
      | WHITESPACE
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | You can handle whitespace (spaces before and after a node) using the 
      code'" \'
      span.text-gray'" \ (apostrophe)
      | for whitespace to the left of the node and 
      code'" \"
      span.text-gray'" \ (quote)
      | for whitespace to the right of the node. 
    p
      | The same whitespace syntax 
        applies to all nodes, even plain text nodes.
      
    pre class="brush: opulent" |
      div
      div'
      div"
      div'"
      div
      
      / <div></div> <div></div><div></div>  <div></div> <div></div>
      
row#syntax-nodes-closing.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | SELF CLOSING
      span.text-primary'" NODES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Self closing nodes from HTML can be marked up using a trailing 
      code'" \/
      span.text-gray'" \ (forward slash)
      at the end of the node markup. Self enclosing nodes cannot have any child nodes.
      
    pre class="brush: opulent" |
      node /
      / <node>
      
      node 
      / <node></node>
      
    p 
      | Opulent will automatically close the most common self-closing HTML nodes:
      code' img
      |, 
      code' link
      |, 
      code' input
      |, 
      code' meta
      |, 
      code' br
      |, 
      code' hr
      |, 
      code' area
      |, 
      code' base
      |, 
      code' col
      |, 
      code' command
      |, 
      code' embed
      |, 
      code' keygen
      |, 
      code' param
      |, 
      code' source
      |, 
      code'" track
      | and 
      code' wbr
      |.
        
row#syntax-attributes-shorthand.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | SHORTHAND
      span.text-primary'" ATTRUBUTES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | As mentioned earlier, the shorthand syntax is similar to SASS and uses 
      code'" \.
      span.text-gray'" \ (dot) 
      | for classes, 
      code'" \#
      span.text-gray'" \ (hash) 
      | for ids and less common,
      code'" \&
      span.text-gray'" \ (ampersand) 
      | for the input node's name attribute.
    
    p 
      | The node name can be missing and is implicitly set to 
      code' div
      |, being the most commonly used node.
      
    pre class="brush: opulent" |
      div#id 
      / <div id="id"></div>
      
      .node-class
      / <div class="node-class"></div>
      
      #node-id
      / <div id="node-id"></div>
      
      input&username
      / <input name="username">

    p 
      | You can chain as many shorthand attributes as you want. You can use as many classes as you want for your node, but the other attributes will be replaced and only 
        the last assigned value will show in the rendered code.

    pre class="brush: opulent" |
      a.btn.btn-primary#click-me href="http://opulent.io" Hello Opulent! 
      / <a class="btn btn-primary" id="click-me" href="http://opulent.io">Hello Opulent!</a>

    p 
      | You can also pass a string as the value for the shorthand attribute. You can use interpolation on
        the passed string, which we will see in the next section.

    pre class="brush: opulent" |
      a."button"
      / <a class="button"></a>
        
row#syntax-attributes-wrapped.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | WRAPPED
      span.text-primary'" ATTRUBUTES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | The wrapped attributes syntax makes use of brackets
      code'" \()
      span.text-gray'" \ (round brackets) 
      | ,
      code'" \[]
      span.text-gray'" \ (square brackets) 
      | and
      code'" \{}
      span.text-gray'" \ (curly brackets) 
      | to surround the atrributes of the node. 
    p
      | For 
      strong'" attribution
      | you can use either 
        the classic
      code'" \=
      span.text-gray'" \ (equals)
      | symbol or the 
      code'" \:
      span.text-gray'" \ (colon) 
      | symbol.
      
    pre class="brush: opulent" |
      div(id="id") 
      / <div id="id"></div>
      
      div(id:"id") 
      / <div id="id"></div>
      
      div(class="node-class")
      / <div class="node-class"></div>

      div[class="example" id="node"]
      / <div class="example" id="node"></div>
    
    p
      | The attributes can be followed by a comma, and can span multiple lines 
        if the wrapped syntax is used.
      
    pre class="brush: opulent" |
      div(class="first", class="second")
      / <div class="first second"></div>
      
      div(
        class="first", 
        class="second"
      )
      / <div class="first second"></div>
      
    p 
      | You can also use wrapped attributes in combination with shorthand attributes. However, the order is important:
        shorthand attributes need to be declared first.

    pre class="brush: opulent" |
      a.btn(id="button" href="http://opulent.io") Hello Opulent! 
      / <a class="btn" id="button" href="http://opulent.io">Hello Opulent!</a>
        
row#syntax-attributes-unwrapped.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | UNWRAPPED
      span.text-primary'" ATTRUBUTES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | The unwrapped attributes syntax allows you to write key-value pairs 
        inline with the node, like you would do in HTML.
    
    p
      | Just like the wrapped attributes syntax, you can use
        you can use either 
        the
      code'" \=
      span.text-gray'" \ (equals)
      | symbol or the 
      code'" \:
      span.text-gray'" \ (colon) 
      | symbol for key-value attributions.
      
    pre class="brush: opulent" |
      div id="id"
      / <div id="id"></div>
      
      div class="node-class"
      / <div class="node-class"></div>

      div class="example" id="node"
      / <div class="example" id="node"></div>
      
      div class:"example" id:"node"
      / <div class="example" id="node"></div>
    
    p 
      | Below you can see how you can combine all the three attribute syntaxes and use them seamlessly in your markup.

    pre class="brush: opulent" |
      a.btn#button(data-attr="value") href="http://opulent.io" Hello Opulent! 
      / <a class="btn" id="button" data-attr="value" href="http://opulent.io">Hello Opulent!</a>
        
row#syntax-attributes-escape.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | ESCAPED
      span.text-primary'" ATTRUBUTES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | All attributes are rendered as 
      strong'" encoded HTML
      | by default. If you consider the variable to be HTML Safe, then you can 
        unescape it by using the 
      code'" \~
      span.text-gray'" \ (tilde)
      | character right after the attribution symbol.
      
      
    pre class="brush: opulent" |
      div attr="<escaped html>"
      / <div attr="&lt;escaped html&gt;"></div>
      
      div attr=~"<unescaped html>"
      / <div attr="<unescaped html"></div>
    
        
row#syntax-text-inline.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | INLINE
      span.text-primary'" TEXT
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Text in opulent can be written directly inline with the node, after all 
        the attributes have been declared.
      
      
    pre class="brush: opulent" |
      li Hello World
      / <li>Hello World</li>

    p 
      | Opulent will assign child nodes to the parent as you would normally expect, 
        with the inline text being the first direct child.
      
    pre class="brush: opulent" |
      li Hello 
        span.child World
      / <li>Hello<span class="child">World</span></li>
      
row#syntax-text-explicit.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | EXPLICIT
      span.text-primary'" TEXT
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | A text node in opulent is marked using a 
      code'" \|
      span.text-gray'" \ (pipe)
      | symbol, and can span multiple lines as long as the text is more indented than the pipe character used.
      
      
    pre class="brush: opulent" |
      | Hello World
      / Hello World
      
      | Hello Opulent!
        I'm on multiple lines.
      / Hello Opulent
      / I'm on multiple lines.

    p 
      | Just like the nodes, the text markup handles whitespace using 
      code'" \'
      span.text-gray'" \ (apostrophe)
      | for whitespace to the left of the text and 
      code'" \"
      span.text-gray'" \ (quote)
      | for whitespace to the right of the text. 
      
    pre class="brush: opulent" |
      | One without
      | space!
      / One withoutspace!
      
      |  Space to the
      |' left!
      / Space to the left!
      
      |" Right
      |  space here!
      / Right space here!
      
      
row#syntax-text-block.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BLOCK
      span.text-primary'" TEXT
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | A node in opulent can receive a text block, marked by the pipe symbol right after the node markup, 
        meaning that everything written underneath, which is more indented than the node will be rendered 
        as plain text.
      
      
    pre class="brush: opulent" |
      p | 
        Hello Opulent!
        This is on multiple lines.
        
      / <p>
      /   Hello Opulent!
      /   This is on multiple lines.
      / </p>
      
row#syntax-text-interpolation.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" TEXT
      | INTERPOLATION
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | In opulent you can interpolate variables into your text and strings, 
        the same way you do in Ruby.
    
    - interpolation_variable = "\#{variable}"
    - interpolation_node_class = "\#{node_class}"
    - interpolation_node_id = "\#{node_id}"
    pre class="brush: opulent" |
      - variable = "text" 
      p This is interpolated #{interpolation_variable}.
      / <p>This is interpolated text</p>

    p You can also interpolate variables into attribute values, whether they are wrapped, unwrapped or shorthand.

    pre class="brush: opulent" |
      - node_class = "btn-primary"
      a class="btn #{interpolation_node_class}"
      / <a class="btn btn-primary"></a>
      
      - node_id = "node"
      a(id="#{interpolation_node_id}")
      / <a id="node"></a>

      - node_class = "button"
      a."#{interpolation_node_class}"
      / <a class="button"></a>
      
row#syntax-text-interpolation.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" TEXT
      | INTERPOLATION
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | In opulent you can interpolate variables into your text and strings, 
        the same way you do in Ruby.
    
    - interpolation_variable = "\#{variable}"
    - interpolation_node_class = "\#{node_class}"
    - interpolation_node_id = "\#{node_id}"
    pre class="brush: opulent" |
      - variable = "text" 
      p This is interpolated #{interpolation_variable}.
      / <p>This is interpolated text</p>

    p You can also interpolate variables into attribute values, whether they are wrapped, unwrapped or shorthand.

    pre class="brush: opulent" |
      - node_class = "btn-primary"
      a class="btn #{interpolation_node_class}"
      / <a class="btn btn-primary"></a>
      
      - node_id = "node"
      a(id="#{interpolation_node_id}")
      / <a id="node"></a>

      - node_class = "button"
      a."#{interpolation_node_class}"
      / <a class="button"></a>
      
row#syntax-text-escape.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" TEXT
      | ESCAPE
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Just like the node attributes, text is escaped by default and can be marked as unescaped using the 
      code'" \~
      span.text-gray'" \ (tilde)
      | character right at the start of the text.
      
    pre class="brush: opulent" |
      p This text is <escaped>
      / <p>This text is &lt;escaped&gt;</p>
      
      p ~ This text is <unescaped>
      / <p>This text is <unescaped></p>
      
    pre class="brush: opulent" |
      p 
        | This text is <escaped>
      / <p>This text is &lt;escaped&gt;</p>
      
      p 
        |~ This text is <unescaped>
        / <p>This text is <unescaped></p>
      
    pre class="brush: opulent" |
      p |~
        This text is <escaped>
      / <p>This text is &lt;escaped&gt;</p>
      
      p |~ 
        This text is <unescaped>
      / <p>This text is <unescaped></p>

    p The whitespace syntax has higher priority than the escape syntax.
      
    pre class="brush: opulent" |
      p 
        |'"~ This text is <unescaped>
      / <p> This text is <unescaped> </p>
      
row#syntax-ruby-evaluate.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | EVAL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | You can evaluate native Ruby code and pass a block into it by using the 
      code'" \-
      span.text-gray'" \ (minus)
      | symbol directly into your view templates. 

      
    pre class="brush: opulent" |
      - var = "example-"
      - a = 10 
      - b = 5
      
      div id=(var + a.to_s)
      / <div id="example-10"></div>
      
row#syntax-ruby-print.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | PRINT
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | You can evaluate native Ruby code and print it using the
      code'" \=
      span.text-gray'" \ (equals)
      | symbol directly into your view templates.
      
    pre class="brush: opulent" |
      - x = 10
      - y = 5
      
      = x * y 
      / 50
  
    p Evaluation print nodes can also be passed as direct inline child to any other node.
    pre class="brush: opulent" |
      - x = "Hello "
      - y = "opulent!"
      
      p = x + y
      / <p>Hello opulent!</p>
      
row#syntax-ruby-attributes.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY CODE
      | ATTRIBUTES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p data-rev=""
      | Opulent can receive attribute values directly from evaluating ruby code, which you can write right
        after the 
      code'" \=
      span.text-gray'" \ (equals)
      | attribution symbol.
      
    pre class="brush: opulent" |
      - div_id = "node"
      
      div id=div_id
      / <div id="node"></div>
    
    h4 Methods
    p You can also call methods on a single ruby variable when using it in attributes.
    pre class="brush: opulent" |
      - div_id = "node"
      
      div id=div_id.upcase
      / <div id="NODE"></div>
  
    h4 Multiple Variables
    p 
      | If you want to use more than one variable inside an attribute, you can wrap the value inside of 
        round brackets 
      code'" \()
      span.text-gray'" \ (round brackets) 
      | which will allow you to apply more complex operations on the attribute's value.
    pre class="brush: opulent" |
      - id1 = "node"
      - id2 = "red"
      
      div id=(id1 + "-" + id2)
      / <div id="node-red"></div>
      
    h4 True and False
    p 
      | When passing a 
      code'" true 
      | value to an attribute, the attribute will be rendered as a blank value
        attribute, which is very common in HTML5. 
        When passing a 
      code'" false 
      | value to an attribute, the attribute won't be shown.
      
    pre class="brush: opulent" |
      div attr=true
      / <div attr></div>
      
    pre class="brush: opulent" |
      div attr=false
      / <div></div>
  
  
    h4 Arrays
    p 
      | You can also pass arrays as attribute values. The
        evaluation result will be joined 
        with a 
      code'" \' '
      span.text-gray'" \ (whitespace)
      | character when you're using them for the
      strong'" class 
      | attribute and with a 
      code'" \'_'
      span.text-gray'" \ (underline)
      | character otherwise.
       
    pre class="brush: opulent" |
      - array = ['value1', 'value2', 'value3']
      
      div class=array 
      / <div class="value1 value2 value3"></div>
      
      div class=['value1', 'value2', 'value3']
      / <div class="value1 value2 value3"></div>
       
      
    p When we're passing an array to something other than a class attribute, we'll get the following output:
    pre class="brush: opulent" |
      - array = ['value1', 'value2', 'value3']
      
      div attr=array 
      / <div attr="value1_value2_value3"></div>
      
      div attr=['value1', 'value2', 'value3']
      / <div attr="value1_value2_value3"></div>
  
  
    h4 Hashes
    p 
      | You can also pass hashes as attribute values. The assigned attribute will serve 
        as base name, and using each hash key, new attributes will be created.
       
    pre class="brush: opulent" |
      - hash = {attr1: 'value1', attr2: 'value2'}
      
      div data=hash 
      / <div data-attr1="value1" data-attr2="value2"></div>
      
      div data={attr1: 'value1', attr2: 'value2'}
      / <div data-attr1="value1" data-attr2="value2"></div>
 
row#syntax-ruby-block.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | BLOCKS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      |When using Ruby 
      code'" do .. end
      | blocks, opulent knows when to insert the
      code'" end
      | of a block automatically.
      
    pre class="brush: opulent" |
      ul
        - 5.times do |i|
          li = i
      
      / <ul>
      /   <li>1</li>
      /   <li>2</li>
      /   <li>3</li>
      /   <li>4</li>
      /   <li>5</li>
      / </ul>
      
    pre class="brush: opulent" |
      - if 3 < 4
        p That's correct
        
      / <p>That's correct</p>
 
row#syntax-ruby-block.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | BLOCKS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      |When using Ruby 
      code'" do .. end
      | blocks, opulent knows when to insert the
      code'" end
      | of a block automatically.
      
    pre class="brush: opulent" |
      ul
        - 5.times do |i|
          li = i
      
      / <ul>
      /   <li>1</li>
      /   <li>2</li>
      /   <li>3</li>
      /   <li>4</li>
      /   <li>5</li>
      / </ul>

row#syntax-ruby-control.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | CONTROL STRUCTURES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can use control structures using the eval markup as well, but opulent has them included 
        as native code, which you can read about in the next chapter. 
      
    pre class="brush: opulent" |
      - if 3 < 4
        p That's correct
        
      / <p>That's correct</p>

row#syntax-ruby-escape.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" RUBY
      | CODE ESCAPING
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | Just like you would with a node or text, you can use the 
      code'" \~
      span.text-gray'" \ (tilde)
      | symbol to unescape eval print, right after the 
      code'" \=
      span.text-gray'" \ (symbol)
      | symbol.
       
    pre class="brush: opulent" |
      - code = "<unescaped>"
      p =~ code  
      
      / <p><unescaped></p>
      
row#syntax-control-if.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" IF
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | Opulent has natively included most Ruby control structures in its syntax. 
        You can markup an 
      code'" \if
      | control structure directly, like this:
       
    pre class="brush: opulent" |
      - a = 5
      - b = 2
      
      if a > b 
        | a is greater than b
      elsif b > a
        | b is greater than a
      else
        | a and b are equal
      
row#syntax-control-unless.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" UNLESS
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can markup an 
      code'" \unless
      | control structure directly, like this:
       
    pre class="brush: opulent" |
      - a = 5
      - b = 2
      
      unless a < b 
        | a is greater than b
      else
        | a needs to be greater than b
      
row#syntax-control-case.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" CASE
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can markup an 
      code'" \case
      | control structure directly, like this:
       
    pre class="brush: opulent" |
      / Guess the lucky number
      - number = 7
      
      case number
        when number - 2
          | Warm
        when number - 1
          | Hot
        when number
          | Contrats, you guessed the number!
        when number + 1
          | Hot
        when number + 2
          | Warm
        else
          | Cold
      
row#syntax-control-each.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" EACH
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can markup an 
      code'" \each
      | control structure directly. However, you will need to specify whether it's an Array or Hash, 
        using their specific bracket markup, like this:
    
    h4 Arrays   
    pre class="brush: opulent" |
      - array_var = [1, 2, 3]
      
      each[] array_var do |index, item|
        = item
      
      / 123
      
    h4 Hashes   
    pre class="brush: opulent" |
      - hash_var = {a: 1, b: 2, c: 3}
      
      each{} hash_var do |key, value|
        = key 
      
      / abc
      
row#syntax-control-while.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" WHILE
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can markup a
      code'" \while
      | control structure natively in opulent, by using the syntax: 
    
    pre class="brush: opulent" |
      - i = 0
      
      while i < 5
        - i += 1
        = i 
      
      / 12345
      
row#syntax-control-until.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" UNTIL
      | CONTROL
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can markup an
      code'" \until
      | control structure natively in opulent, by using the syntax: 
    
    pre class="brush: opulent" |
      - i = 0
      
      until i == 5
        - i += 1
        = i 
      
      / 12345
      
row#syntax-comments-basic.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BASIC
      span.text-primary'" COMMENTS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | Comments in opulent can span multiple lines and are marked up using a simple 
      code'" \/
      span.text-gray'" (forward slash)
      | . Opulent comments are not rendered in the HTML output. 
      
    pre class="brush: html" |
      / This is a comment
        on multiple lines
        
row#syntax-comments-visible.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | VISIBLE
      span.text-primary'" COMMENTS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can output a comment in HTML by using the 
      code'" \/!
      span.text-gray'" (forward slash & excalamation symbol)
      | syntax. 
      
    pre class="brush: op" |
      /! This is a comment
      
      / <!-- This is a comment -->
        
row#syntax-doctype-basic.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BASIC
      span.text-primary'" DOCTYPES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | Opulent comes with a variety of HTML  
      code'" \doctype
      | markups available. 
      
    pre class="brush: op" |
      doctype
      / <!DOCTYPE html>
      
      doctype html
      / <!DOCTYPE html>
      
      doctype 5
      / <!DOCTYPE html>
      
    pre class="brush: op" |
      doctype 1.1
      / <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
      
    pre class="brush: op" |
      doctype strict
      / <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
      
    pre class="brush: op" |
      doctype frameset
      / <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
      
    pre class="brush: op" |
      doctype mobile
      / <!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">
      
    pre class="brush: op" |
      doctype basic
      / <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
      
    pre class="brush: op" |
      doctype transitional
      / <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
      
    pre class="brush: op" |
      doctype xml
      / <?xml version="1.0" encoding="utf-8" ?>
      
    pre class="brush: op" |
      doctype xml ISO-8859-1
      / <?xml version="1.0" encoding="iso-8859-1" ?>
      
row#syntax-doctype-custom.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | CUSTOM
      span.text-primary'" DOCTYPES
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | You can write a custom 
      code'" \doctype
      | by simply writing the text you want after the doctype node. 
      
    pre class="brush: op" |
      doctype custom
      / <!DOCTYPE custom>
        
row#syntax-filters-basic.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BASIC
      span.text-primary'" FILTERS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      strong" Filters
      | let you use other languages within a opulent template. They take 
        a block of plain text as an input. Some filters also have a default
        wrapper node associated with them, such as the 
      strong'" css
      | filter and 
      strong'" javascript
      | filter.

    pre class="brush: op" |
      :markdown
        # Markdown
        I often like including markdown documents.

      :coffeescript
        console.log 'This is coffeescript'

    p
      | Opulent comes with a variety of 
      code'" \filter
      | implementations available by default. Each filter uses an associated gem and requires that gem to be installed.
    
    ul 
      li > code \ :coffeescript
      li > code \ :javascript
      li > code \ :scss
      li > code \ :sass
      li > code \ :css
      li > code \ :cdata
      li > code \ :escaped
      li > code \ :markdown
      li > code \ :maruku
      li > code \ :textile
        
row#syntax-include-basic.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      | BASIC
      span.text-primary'" INCLUDE
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p
      | The 
      code'" include 
      | directive allows you to include external files into your current template.
        Files are included by copying the content in place, and they are parsed afterwards.
      strong'" Indentation is preserved 
      | when including a file. The 
      code'" \.op
      | file extension doesn't need to be specified.

      
    pre class="brush: op" |
      / file: definitions/example.op 
      
      def node 
        .node 
          yield
    
    p 
      | To include the 
      code'" example.op
      | file we have written above, we can use:
    
    pre class="brush: op" |
      / file: index.op
      
      include definitions/example
      
      node 
      / <div class="node"></div>
      
    p
      | The include directive indentation will be preserved. In the following example, 
        everything from inside the 
      strong'" list.op 
      | file will be included inside of the ul node.
    pre class="brush: op" |
      ul 
        include list
      
    p   
      | You can also include all opulent files from within a folder using the 
      code'" \*
      strong GLOB 
      |' modifier. However, the order will be alphabetical and dependencies 
        might not be met correctly. 
      
    pre class="brush: op" |
      / file: index.op
      
      include definitions/*
      
      node 
      / <div class="node"></div>
        
row#syntax-definitions-concept.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" DEFINITIONS
      | CONCEPT
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      strong" Node Definitions 
      | are reusable markup elements which provide a huge increase in development speed. 
        Definitions allow you to group complex node markup logic inside a simple tag, 
        and can be included in the current page from a central source. 
    p
      | Definitions are 
        marked up using the 
      code'" def
      | keyword and accept definition arguments with optional default values.
      
    p > strong Definitions are to opulent what mixins are to sass and less.
      
    pre class="brush: op" |
      def node 
        div 
      
      node 
      / <div></div>
      
row#syntax-definitions-arguments.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" DEFINITIONS
      | ARGUMENTS
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      | As you would expect, definitions can receive arguments, which will be available as variables with the same name.
        Arguments are marked up using 
      code'" \()
      span.text-gray'" (round brackets)  
      | and can have a preset default value.
      
    pre class="brush: op" |
      def node(param)
        div id=param
      
      node param="example"
      / <div id="example"></div>
      
    pre class="brush: op" |
      def node(param1, param2)
        div data-attr1=param1 data-attr2=param2
      
      node param1="value1" param2="value2"
      / <div data-attr1="value1" data-attr2="value2"></div>
      
    p 
      | You can set default values for definition parameters just like you would in Ruby.
      
    pre class="brush: op" |
      def node(attr="default")
        div data-attr=attr
      
      node
      / <div data-attr="default"></div>
      
      node attr="hello"
      / <div data-attr="hello"></div>
      
row#syntax-definitions-extension.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" DEFINITIONS
      | EXTENSION
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      | Definition call arguments which are not specified in the parameters list
        will be stored inside a 
      strong'" Hash 
      | variable called 
      code' attributes
      |.
    p 
      | You can extend any node inside the definition using the 
      code'" \+
      span.text-gray'" (plus)
      | symbol.
      
    p.text-primary 
      | The 
      strong'" attributes
      | variable is a reserved keyword in opulent definitions.
      
      
    pre class="brush: op" |
      def node(param)
        div+attributes id=param  
      
      node param="example" data-attr1="value" data-attr2="value"
      / <div id="example" data-attr1="value" data-attr2="value"></div>
      
      
    h6.text-gray Example 1
    h4 Attribute Manipulation 
    p You can manipulate the attributes map before extending it. 
    
    pre class="brush: op" |
      def node(param)
        - attributes['data-attr1'].upcase!
        - attributes['data-attr2'].capitalize!
        
        div+attributes id=param  
      
      node param="example" data-attr1="value" data-attr2="value"
      / <div id="example" data-attr1="VALUE" data-attr2="Value"></div>
      
    h6.text-gray Example 2
    h4 Scripts and Stylesheets
    p
      | With opulent you can define a much more explicit, centralized script inclusion.
    
    - doc_href_embed = '#{href}'
    - doc_src_embed = '#{src}'
    pre class="brush: op" |
      def css(href)
        - href = "/css/\#{href}.css"
        link href=href rel="stylesheet" type="text/css"
        
      
      css href="application/documentation"
      / <link href="/css/application/documentation.css" rel="stylesheet" type="text/css">
      
    pre class="brush: op" |
      def js(src)
        - src = "/js/#{doc_src_embed}.js"
        script src=src type="text/javascript"
      
      
      js src="application/main"
      / <script src="/js/application/main.js" type="text/javascript"></script>
        
      
    h6.text-gray Example 3
    h4 Bootstrap Column  
    p
      | Here's a practical example on how you could define a 
      a'" href="http://getbootstrap.com" Bootstrap 
      | column element and make it much easier to use.
    
    pre class="brush: op" |
      / Create a boostrap column
      /
      def col(xs, sm, md, lg, offset = {})
        - col_class = []
        - col_class << 'col-xs-' + xs.to_s if xs
        - col_class << 'col-sm-' + sm.to_s if sm
        - col_class << 'col-md-' + md.to_s if md
        - col_class << 'col-lg-' + lg.to_s if lg
        
        - col_class << 'col-xs-offset-' + offset[:xs].to_s if offset[:xs]
        - col_class << 'col-sm-offset-' + offset[:sm].to_s if offset[:sm]
        - col_class << 'col-md-offset-' + offset[:md].to_s if offset[:md]
        - col_class << 'col-lg-offset-' + offset[:lg].to_s if offset[:lg]
        
        div+attributes class=col_class
          yield 
          / We will learn about yield in the next section
          
      
      col xs=12 sm=6 md=4 lg=3
      / <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3"></div>
      
row#syntax-definitions-yield.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" DEFINITIONS
      | YIELD
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      | Definition call child nodes can be included anywhere within the definition using the 
      code'" yield
      | keyword.
      
  pre class="brush: op" |
    def node 
      .parent 
        yield
    
    
    node 
      .child
      
    / <div class="parent">
    /   <div class="child">
    /   </div>
    / </div>
      
row#syntax-definitions-scope.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset SYNTAX
    h2.font-thin
      span.text-primary'" DEFINITIONS
      | SCOPE
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    h4 Local Variables
    p 
      | Variables declared inside of a definition have 
      strong' local scope
      | , meaning they 
        are available only inside of the definition.
      
    pre class="brush: op" |
      - var = 3
      
      def node 
        / var has a local scope here
        - var = 5
      
      node
      = var
      / 3, the value of var doesn't get changed
        
    h4 Instance Variables
    p 
      | Instance variables which are either declared or passed using ruby blocks 
        in the view rendering code are available both inside and outside of
        definitions, meaning they have a
      strong' global scope
      |.
      
    pre class="brush: op" |
      - @var = 3
      
      def node 
        / @var instance is passed inside the definition
        - @var = 5
      
      node
      = @var
      / 5, the value of @var changed
      
row#conclusion-end.padding-top-5x.text-center  
  col xs=12 
    h4.font-light.text-gray.margin-reset CONCLUSION
    h2.font-thin
      | END OF 
      span.text-primary'" DOCUMENTATION
    .h1.margin-vertical-1x data-revelate="scale 0, easing spring" > fa.text-lightgray icon="ellipsis-h"

row  
  col xs=12
    p 
      strong Opulent is open source
      | , free and available for everyone, and a huge amount of effort 
        has been put into it. If you feel that opulent is on your liking, 
        please help us spread the word, because more users means more contributors,
        which we really need right now.
    p
      | In web development there will always be place for improvement, and opulent 
        will help with that.
    p  
      strong 
        | Together, we can make opulent the 
        span.text-primary'" Templating Engine of choice
        | for every Ruby Application Developer.
      
