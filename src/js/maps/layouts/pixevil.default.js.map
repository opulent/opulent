{"version":3,"sources":["layouts/default.coffee"],"names":[],"mappings":"AAAA;EAAA,CAAC,SAAC,CAAD,EAAI,MAAJ,EAAY,QAAZ;IACC;IAEA,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,aAAhB,GAAgC,SAAA;MAG9B,IAAC,CAAA,IAAD,GAAQ,SAAA;QAEN,IAAC,CAAA,OAAO,CAAC,QAAT,CAAkB,qBAAlB;MAFM;MAQR,IAAC,CAAA,KAAD,GAAS,SAAA;QACP,IAAO,kBAAP;AACE,iBADF;;QAIA,IAAC,CAAA,aAAD,GAAiB,IAAC,CAAA;QAClB,IAAC,CAAA,cAAD,GAAkB,IAAC,CAAA,YAAD,GAAgB,IAAC,CAAA,QAAQ,CAAC,KAA1B,GAAkC,IAAC,CAAA,QAAQ,CAAC;QAE9D,IAAC,CAAA,OAAO,CAAC,MAAT,CAAgB,IAAC,CAAA,cAAjB;QACA,IAAC,CAAA,OAAO,CAAC,KAAT,CAAe,IAAC,CAAA,aAAhB;QAEA,IAAC,CAAA,KAAK,CAAC,MAAP,CAAc,IAAC,CAAA,cAAf;QACA,IAAC,CAAA,KAAK,CAAC,KAAP,CAAa,IAAC,CAAA,aAAd;QAGA,IAAC,CAAA,MAAM,CAAC,IAAR,CAAa,CAAA,SAAA,KAAA;iBAAA,SAAC,CAAD,EAAI,OAAJ;AACX,gBAAA;YAAA,MAAA,GAAS,CAAA,CAAE,OAAF;YAIT,KAAC,CAAA,aAAD,GAAiB,KAAC,CAAA;YAClB,KAAC,CAAA,cAAD,GAAkB,KAAC,CAAA,aAAD,GAAiB,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,UAAW,CAAA,CAAA,CAAE,CAAC,KAAzC,GAAiD,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,UAAW,CAAA,CAAA,CAAE,CAAC;YAG3F,WAAA,GAAc,KAAC,CAAA,aAAD,GAAiB,KAAC,CAAA,QAAQ,CAAC;YACzC,YAAA,GAAe,KAAC,CAAA,cAAD,GAAkB,KAAC,CAAA,QAAQ,CAAC;YAG3C,OAAA,GAAU,CAAA,CAAE,qBAAF,EAAyB,MAAzB;YACV,OAAO,CAAC,IAAR,CAAa,SAAC,WAAD,EAAc,KAAd;AACX,kBAAA;cAAA,SAAA,GAAY;cAEZ,IAAG,KAAA,IAAS,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAAzC;gBACE,SAAS,CAAC,GAAV,GAAgB,YAAA,GAAe,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAAQ,CAAC,IADvE;eAAA,MAEK,IAAG,QAAA,IAAY,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAA5C;gBACH,SAAS,CAAC,MAAV,GAAmB,YAAA,GAAe,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAAQ,CAAC,OADrE;;cAGL,IAAG,MAAA,IAAU,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAA1C;gBACE,SAAS,CAAC,IAAV,GAAiB,WAAA,GAAc,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAAQ,CAAC,KADvE;eAAA,MAEK,IAAG,OAAA,IAAW,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAA3C;gBACH,SAAS,CAAC,KAAV,GAAkB,WAAA,GAAc,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,QAAQ,CAAC,MADnE;;cAGL,IAAG,OAAA,IAAW,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAA9B;gBACE,SAAS,CAAC,KAAV,GAAkB,WAAA,GAAc,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,MAD/D;;cAEA,IAAG,QAAA,IAAY,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAA/B;gBACE,SAAS,CAAC,MAAV,GAAmB,YAAA,GAAe,KAAC,CAAA,KAAM,CAAA,CAAA,CAAE,CAAC,KAAM,CAAA,WAAA,CAAY,CAAC,OADjE;;cAGA,CAAA,CAAE,KAAF,CAAQ,CAAC,GAAT,CAAa,SAAb;YAlBW,CAAb;YAwCA,iBAAA,GAAoB,CAAA,CAAE,wBAAF,EAA4B,MAA5B;YACpB,IAAG,iBAAiB,CAAC,MAAlB,GAA2B,CAA9B;cACE,MAAA,GAAS,CAAA,CAAE,QAAF,EAAY,iBAAZ;cAET,UAAA,GAAa,QAAA,CAAS,MAAM,CAAC,IAAP,CAAY,iBAAZ,CAAT;cACb,WAAA,GAAc,QAAA,CAAS,MAAM,CAAC,IAAP,CAAY,kBAAZ,CAAT;cAEd,WAAA,GAAc,KAAC,CAAA;cACf,YAAA,GAAe,WAAA,GAAc,WAAd,GAA4B;cAE3C,WAAA,GAAc,CAAC,CAAC,WAAA,GAAe,KAAC,CAAA,YAAjB,CAAD,GAAmC;cACjD,UAAA,GAAa,CAAC,CAAC,YAAA,GAAgB,KAAC,CAAA,aAAlB,CAAD,GAAqC;cAElD,MAAM,CAAC,GAAP,CACE;gBAAA,OAAA,EAAS,WAAT;gBACA,QAAA,EAAU,YADV;gBAEA,aAAA,EAAe,WAFf;gBAGA,YAAA,EAAc,UAHd;eADF,EAZF;;UAvDW;QAAA,CAAA,CAAA,CAAA,IAAA,CAAb;MAfO;MAuGT,IAAC,CAAA,KAAD,GAAS,SAAC,CAAD,EAAI,IAAJ,GAAA;IAlHqB;IAwHhC,CAAC,CAAC,UAAU,CAAC,eAAb,CAA6B,SAA7B,EAAwC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,aAAxD;EA3HD,CAAD,CAAA,CA8HE,MA9HF,EA8HU,MA9HV,EA8HkB,QA9HlB;AAAA","file":"layouts/pixevil.default.js","sourceRoot":"/source/","sourcesContent":["(($, window, document) ->\n  \"use strict\"\n\n  $.fn.rockSlider.defaultLayout = ->\n    # Initialize the @parameters\n    #\n    @load = ->\n      # Add Classes\n      @element.addClass 'rock-slider-default'\n\n      return\n\n    # Set up the slider and each of the slides\n    #\n    @setup = ->\n      unless @cache?\n        return\n\n      # Slider Size\n      @element_width = @parent_width\n      @element_height = @parent_width / @settings.width * @settings.height\n\n      @element.height @element_height\n      @element.width @element_width\n\n      @outer.height @element_height\n      @outer.width @element_width\n\n      # Compute visible background image size and set margins to center the image\n      @slides.each (i, element) =>\n        $slide = $ element\n\n        # Set slider visible width and height, meaning area which is inside the\n        # container, overflowing on the screen\n        @visible_width = @element_width\n        @visible_height = @visible_width / @cache[i].background[0].width * @cache[i].background[0].height\n\n        # Slide Layers\n        width_ratio = @element_width / @settings.width\n        height_ratio = @element_height / @settings.height\n\n        # Get top, right, bottom and left position of the slide layers\n        $layers = $('.rock-layer-wrapper', $slide)\n        $layers.each (layer_index, layer) =>\n          layer_css = {}\n\n          if 'top' of @cache[i].layer[layer_index].position\n            layer_css.top = height_ratio * @cache[i].layer[layer_index].position.top\n          else if 'bottom' of @cache[i].layer[layer_index].position\n            layer_css.bottom = height_ratio * @cache[i].layer[layer_index].position.bottom\n\n          if 'left' of @cache[i].layer[layer_index].position\n            layer_css.left = width_ratio * @cache[i].layer[layer_index].position.left\n          else if 'right' of @cache[i].layer[layer_index].position\n            layer_css.right = width_ratio * @cache[i].layer[layer_index].position.right\n\n          if 'width' of @cache[i].layer[layer_index]\n            layer_css.width = width_ratio * @cache[i].layer[layer_index].width\n          if 'height' of @cache[i].layer[layer_index]\n            layer_css.height = height_ratio * @cache[i].layer[layer_index].height\n\n          $(layer).css layer_css\n\n          return\n\n        # Fit rock-slider videos to their containers\n        # $(@settings.selector.video, @element).each (i, video)=>\n        #   $video = $(video)\n        #   $parent = $video.parent()\n        #\n        #   if $parent.is('.rock-video-background')\n        #     return\n        #\n        #   height = $parent.height()\n        #   width = $parent.width()\n        #\n        #   $video.css\n        #     width: width\n        #     height: height\n        #\n        #   return\n\n        # Set slide to have a full screen Video Background\n        $video_background = $('.rock-video-background', $slide)\n        if $video_background.length > 0\n          $video = $('.video', $video_background)\n\n          data_width = parseInt($video.attr('data-rock-width'))\n          data_height = parseInt($video.attr('data-rock-height'))\n\n          video_width = @element_width\n          video_height = video_width * data_height / data_width\n\n          margin_left = -(video_width - (@parent_width)) / 2\n          margin_top = -(video_height - (@parent_height)) / 2\n\n          $video.css\n            'width': video_width\n            'height': video_height\n            'margin-left': margin_left\n            'margin-top': margin_top\n\n        return\n      return\n\n    # Display the slide element with index i and program the animation logic for\n    # each background, layer and object\n    #\n    # Previous slide needs to be set in order to preview the out animation so that\n    # we can create a transition between every slide\n    #\n    # The layers and objects need to be stopped and reanimated in order to prevent\n    # animation flaws.\n    #\n    # Layer and object animation will transition from an inverted\n    # animation state to a default state to provide normal slider behaviour\n    #\n    @slide = (i, prev) ->\n      return\n    return\n\n  # Add the layer to RockSlider as a new instance\n  #\n  $.rockSlider.register_layout 'default', $.fn.rockSlider.defaultLayout\n  return\n\n) jQuery, window, document\n"]}