{"version":3,"sources":["features/video.coffee"],"names":[],"mappings":"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","file":"features/pixevil.video.js","sourceRoot":"/source/","sourcesContent":["(($, window, document) ->\n  \"use strict\"\n\n  $.fn.rockSlider.video = ->\n    ###\n    Setup video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @initialize = -> \n      ###\n      Handle autoplay timeouts using a timeout timeline\n      ###\n      @video_timeline = {}\n\n      delay = 500\n      interval = undefined\n      i = 0\n      tries = 10\n\n      # Handle background videos\n      $('.rock-video-background').each (index, background) ->\n        unless $(background).hasClass 'rock-object'\n          $(background).addClass 'rock-object'\n        return\n\n      $(\"video.rock-video\", @element).attr \"data-rock-video-type\", \"html5\"\n      $(\"iframe[data-rock-src*=\\\"youtube.com\\\"].rock-video\", @element).attr \"data-rock-video-type\", \"youtube\"\n      $(\"iframe[data-rock-src*=\\\"vimeo.com\\\"].rock-video\", @element).attr \"data-rock-video-type\", \"vimeo\"\n\n      $(@settings.selector.video, @element).each (i, el) =>\n        # Get video\n        $video = $(el)\n\n        # Get volume\n        volume = $video.attr(\"data-rock-volume\")\n        volume = (if isNaN(volume) then 0 else volume)\n\n        # Get controls\n        controls = ($video.attr(\"data-rock-controls\") is \"true\")\n\n        # Pause slider on video play\n        pause_slider= ($video.attr(\"data-rock-pause-slider\") is \"true\")\n\n        # Get src\n        src = $video.attr(\"data-rock-src\")\n\n        # Get video type\n        video_type = $video.attr(\"data-rock-video-type\")\n\n        # Get video id\n        $video.attr \"id\", @get_random_id(\"rock-video\") unless $video.attr(\"id\")?\n        id = $video.attr(\"id\")\n\n        # HTML5\n        if video_type is \"html5\"\n          # Set volume\n          $video.get(0).volume = volume\n\n          # Enable or disable controls\n          $video.attr \"controls\", \"controls\"  if controls is true\n\n          # If slider is set to autoplay, pause the slider when video starts\n          if @settings.autoplay is true and pause_slider is true\n            # On video play\n            $video.on \"play\", =>\n              @pause_timer()\n              return\n\n            # On video pause\n            $video.on \"pause ended\", =>\n              @unpause_timer()\n              return\n\n\n        # YouTube\n        if video_type is \"youtube\"\n          video_id = undefined\n          separator = undefined\n\n          # Enable video JS API\n          if src.indexOf(\"enablejsapi=1\") is -1\n            if src.indexOf(\"?\") is -1\n              $video.attr \"src\", src + \"?enablejsapi=1\"\n            else\n              $video.attr \"src\", src + \"&enablejsapi=1\"\n            src = $video.attr(\"src\")\n\n          # Set player API ID\n          if src.indexOf(\"playerapiid=\") is -1\n            if src.indexOf(\"?\") is -1\n              $video.attr \"src\", src + \"?playerapiid=\" + id\n            else\n              $video.attr \"src\", src + \"&playerapiid=\" + id\n            src = $video.attr(\"src\")\n\n          # Get youtube Video ID\n          unless src.indexOf(\"embed\") is \"-1\"\n            video_id = src.split(\"/\")\n            video_id = video_id[video_id.length - 1]\n            separator = video_id.indexOf(\"?\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n          else\n            video_id = src.split(\"v=\")[1]\n            separator = video_id.indexOf(\"&\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n\n          # Create a new YT Player using the API\n          $video.load =>\n            @youtube_player[id] = new YT.Player(id,\n              height: \"720\"\n              width: \"1280\"\n              video_id: video_id\n              events:\n                onStateChange: (e) =>\n                  @pause_timer()  if e.data is 1\n                  @unpause_timer()  if e.data is 2 or e.data is 0\n            )\n\n            # Try to set the video volume\n            i = 0\n            interval = setInterval(=>\n              i++\n              if i is tries\n                clearInterval interval\n              else if not @youtube_player[id]? or typeof @youtube_player[id].setVolume isnt \"function\"\n                return\n              else\n                clearInterval interval\n              @youtube_player[id].setVolume volume\n            , delay)\n            return\n\n        # Vimeo\n        if video_type is \"vimeo\"\n\n          # Enable vimeo JS API\n          if src.indexOf(\"api=1\") is -1\n            if src.indexOf(\"?\") is -1\n              $video.attr \"src\", src + \"?api=1\"\n            else\n              $video.attr \"src\", src + \"&api=1\"\n            src = $video.attr(\"src\")\n\n          # Setup Vimeo player ID\n          if src.indexOf(\"player_id=\") is -1\n            if src.indexOf(\"?\") is -1\n              $video.attr \"src\", src + \"?player_id=\" + id\n            else\n              $video.attr \"src\", src + \"&player_id=\" + id\n            src = $video.attr(\"src\")\n\n          # Create a new Vimeo Player API\n          $video.load =>\n            @vimeo_player[id] = $f(id)\n            @vimeo_player[id].addEvent \"ready\", =>\n              $video.attr \"data-rock-ready\", \"true\"\n              @vimeo_player[id].api \"setVolume\", volume\n              if @settings.autoplay is true and pause_slider is true\n                @vimeo_player[id].addEvent \"play\", @pause_timer\n                @vimeo_player[id].addEvent \"pause\", @unpause_timer\n                @vimeo_player[id].addEvent \"finish\", @unpause_timer\n            return\n        return\n\n    ###\n    Handle video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @handle_videos = (previous, current) ->\n      $previous = @slides.eq(previous)\n      $current = @slides.eq(current)\n\n      previous_videos = $(@settings.selector.video, $previous)\n      current_videos = $(@settings.selector.video, $previous)\n\n      # Pause or stop videos from previous slide\n      if previous != -1 and previous_videos.length > 0\n        previous_videos.each =>\n          # Current Video\n          $video = $(` this `)\n\n          # Get video ID\n          id = $video.attr('id')\n\n          # Get video type\n          video_type = $video.attr('data-rock-video-type')\n\n          # Check if the video resets when next slide is triggered\n          reset = $video.attr('data-rock-reset') == 'true'\n\n          # Clear the video timeout for the current video\n          clearTimeout @video_timeline[id]\n\n          # HTML5\n          if video_type == 'html5'\n            # Pause the video\n            $video.get(0).pause()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                $video.get(0).current_time = 0\n                return\n              ), @data[current].background[0].animation[0].duration\n\n          # Youtube\n          else if video_type == 'youtube'\n            # Pause the video\n            @youtube_player[id].pauseVideo()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @youtube_player[id].stopVideo()\n                return\n              ), @data[current].background[0].animation[0].duration\n\n          # Vimeo\n          else if video_type == 'vimeo'\n            # Pause the video\n            @vimeo_player[id].api 'pause'\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @vimeo_player[id].api 'unload'\n                return\n              ), @data[current].background[0].animation[0].duration\n          return\n\n        @log \"Paused (handled) videos from slide #{previous}.\"\n\n      if current_videos.length > 0\n        # Play videos from current slide\n        current_videos.each =>\n          # Get video\n          $video = $(` this `)\n\n          # Get video ID\n          id = $video.attr('id')\n\n          # Set try interval data\n          delay = 500\n          interval = undefined\n          i = 0\n          tries = 10\n\n          # Check if video should autoplay\n          autoplay = $video.attr('data-rock-autoplay') == 'true'\n\n          # Get autoplay time\n          autoplay_time = if $video.attr('data-rock-autoplay-time')? then parseInt($video.attr('data-rock-autoplay-time'), 10) else 100\n\n          # Check if the video pauses the slider\n          pause_slider = $video.attr('data-rock-pause-slider') == 'true'\n\n          # HTML5\n          if $video.attr('data-rock-video-type') == 'html5'\n            if autoplay == true\n              # Start the video player after the set delay\n              @video_timeline[id] = setTimeout((->\n                $video.get(0).play()\n                return\n              ), autoplay_time)\n\n          # Youtube\n          if $video.attr('data-rock-video-type') == 'youtube'\n            if autoplay == true\n              # Try to get the youtube player\n              i = 0\n              interval = setInterval((=>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !$video.attr('data-rock-ready')? or\n                        !defined(@youtube_player[id]) or\n                        typeof @youtube_player[id].playVideo != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout((=>\n                  @youtube_player[id].playVideo()\n                  return\n                ), autoplay_time)\n                return\n              ), delay)\n\n          # Vimeo\n          if $video.attr('data-rock-video-type') == 'vimeo'\n            if autoplay == true\n              # Try to get the vimeo player\n              i = 0\n              interval = setInterval((=>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !$video.attr('data-rock-ready')? or\n                        typeof @vimeo_player[id].api != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout((->\n                  Froogaloop(id).api 'play'\n                  return\n                ), autoplay_time)\n                return\n              ), delay)\n          return\n\n        @log \"Played (handled) videos from slide #{current}.\"\n\n      return\n    return\n\n  # Add the feature to RockSlider as a new instance\n  #\n  $.rockSlider.register_feature 'video', $.fn.rockSlider.video\n\n) window.jQuery, window, document\n"]}