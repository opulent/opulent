{"version":3,"sources":["slidea.coffee","modules/content-scaling.coffee","modules/controls.coffee","modules/keyboard.coffee","modules/loader.coffee","modules/mousewheel.coffee","modules/pagination.coffee","modules/pause-on-hover.coffee","modules/prevent-dragging.coffee","modules/progress-bar.coffee","modules/retina.coffee","modules/scroller.coffee","modules/thumbnails.coffee","modules/touch.coffee","modules/video.coffee","modules/video-cover.coffee"],"names":[],"mappings":"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","file":"pixevil.slidea.js","sourceRoot":"/source/","sourcesContent":["###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n@guide\n  Running slidea\n    $('.slidea').slidea\n      width: 1280\n      height: 720\n      layout: 'layoutName'\n\n  Using methods\n    $('.slidea').data('slidea').method_name()\n\n  Adding events\n    $('.slidea').on 'eventName', ->\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  # @Slidea\n  $.slidea = (element, options) ->\n    ###\n    Default attribute values\n    ###\n    _defaults =\n      animation:\n        initial: \"opacity 0\" # Slide initial animation state\n        out: \"opacity 0\" # Slide default out animation\n        easing: \"easeOutQuad\" # Default animation easing\n        duration: 500 # Default animation duration\n\n      duration: 4000 # Slide duration (display time) in milliseconds\n\n      overlap: 1 # Overlap previous out and current in animations (value >= 0)\n                 # where 0 means overlap and 1 means wait for transition to finish\n\n      layout: \"default\" # Slidea layout\n\n      layerIndex: 99 # Starting z-index for layers\n\n      autoplay: false # Autoplay feature\n      loop: true # Start from first slide after reaching last\n\n      preload: 'fast' # Preload mode: 'fast' or 'all'\n\n      animate: 'TweenLite'\n\n      # content_parallax:\n      #   enabled: true # Fade content on scroll\n      #   data:\n      #     mode: 'from-middle'\n      #     transform:\n      #       translateY: 0.6 # Scroll fade translate speed coefficient\n      #       opacity: 0.4 # Scroll fade fade speed coefficient\n      #     transform_style:\n      #       opacity: 'default' # from-middle, to-middle, default\n\n      grid:           # Split slidea background into tiles\n        rows: 1       # Number of rows to split the background into\n        columns: 1    # Number of columns to split the background into\n        stagger: 0.1  # Animation delay in between tiles\n\n      # canvas_parallax:\n      #   enabled: true # Parallax scroll coefficient\n      #   data:\n      #     transform:\n      #       translateY: 0.2\n      #   layers: true # Parallax layers as well\n\n      screen: # Refers to the current screen size\n        xs: 0\n        sm: 768\n        md: 992\n        lg: 1200\n        xlg: 1560\n\n      selector: # Element selectors\n        slide: \".slidea-slide\" # Should not be changed unless absolutely necessary\n        content: \".slidea-content\"\n        contentWrapper: \".slidea-content-wrapper\"\n        contentContainer: \".slidea-content-container\"\n        canvas: \".slidea-canvas\"\n        background: \".slidea-background\"\n        backgroundWrapper: \".slidea-background-wrapper\"\n        videoBackground: \".slidea-video-background\"\n        video: \".slidea-video\"\n        videoCover: \".slidea-video-cover\"\n        layer: \".slidea-layer\"\n        layerWrapper: \".slidea-layer-wrapper\"\n        object: \".slidea-object, .s-obj\"\n        objectWrapper: \".slidea-object-wrapper\"\n        next: \".slidea-next\"\n        prev: \".slidea-prev\"\n        inner: \".slidea-inner\"\n        wrapper: \".slidea-wrapper\"\n\n    # Debugging flag\n    @debug = true\n\n    # Set @options\n    @_defaults = _defaults\n    @settings = $.extend true, {}, _defaults, options\n\n    # Slider\n    @element = $ element\n    @parent = @element.parent()\n\n    ###\n    Current active slide. We're using -1 to say that there is no current\n    slide yet, or that the slider hasn't started yet.\n    ###\n    @current = -1\n\n    # Video Players\n    @youtube_player = {}\n    @vimeo_player = {}\n\n    # Window selector\n    @window = $(window)\n\n    # Slides loaded\n    @loaded = false\n\n    ###\n    Timer\n    Used in slide to set timeout to next slide\n    ###\n    @timer = {}\n    @timer.timeout = null\n    @timer.start = 0\n    @timer.remaining = 0\n\n    # Get or set slider ID\n    if @element.attr('id')?\n      @id = @element.attr 'id'\n    else\n      @id = @get_random_id 'rock'\n      @element.attr 'id', @id\n\n    @initialize = =>\n      @log \"Initializing Slidea..\"\n      @log @settings\n\n      # Register modules and layouts\n      @register()\n\n      # Add Slidea Classes\n      @add_classes()\n\n      # Wrap Objects\n      @wrap_objects()\n\n      # Set wrapper\n      @wrapper = $ @settings.selector.wrapper, @element\n\n      # Set inner\n      @inner = $ @settings.selector.inner, @element\n\n      # Set Slides\n      @slides = $ @settings.selector.slide, @element\n\n      # Set total slide count\n      @slides_length = @slides.length\n\n      # Initialize slides animation data\n      @data = {}\n      @slides.each (index) => @data[index] = {}\n\n      # Set the indexes of the relevant first slides\n      if @settings.first_slide?\n        @first_slide = @settings.first_slide\n      else\n        @first_slide = 0\n      @set_adjacent_slides @first_slide\n\n      # Set Active Slide\n      @active = @slides.eq @first_slide\n\n      # Set Animation Platform\n      @animate = window[@settings.animate]\n      @log \"Animating using the #{@settings.animate} platform.\"\n\n      # Initialize layouts\n      @eval.layouts 'initialize'\n\n      # Initialize modules\n      @eval.modules 'initialize'\n\n      # Animation States\n      @init_animus()\n\n      # @Settings\n      @set_data_settings()\n\n      # Set relevant object sizes\n      @set_parent_sizes()\n\n      # Get current responsive context\n      @set_responsive_context()\n\n      # Setup Layers\n      @set_layers_zindex()\n\n      # Bind Window Resize\n      @bind_resize()\n\n      # Bind Window Blur and focus\n      @bind_focus()\n\n      # Add links\n      @bind_inner_links()\n\n      # Perform Initial Load\n      @load =>\n\n        # Initial slider sizing\n        @resize()\n\n        @log \"Animation data parsed.\"\n        @log @data\n\n        # Start the slider after loader is hidden\n        setTimeout (=>\n          @slide @first_slide\n        ), 500\n\n        @log \"Load callback has finished.\"\n        return\n      return\n\n    ###\n    Slide wrapper function for calling static slider method to move\n    the carousel to the next slide\n    ###\n    @slide = (to) ->\n      from = @current\n\n      # Index Logic\n      if to == @current\n        return\n      if to > @slides_length - 1\n        to = 0\n      if to < 0\n        to = @slides_length - 1\n\n      @log \"---------------------------------------\"\n      @log \"Slide transition from #{from} to #{to}.\"\n\n      # Set adjacent next and prev slides\n      @set_adjacent_slides to\n\n      # Set Previous\n      $('.previous', @element).removeClass 'previous'\n      @slides.eq(@prev).addClass 'previous'\n\n      # Set Active\n      $('.active', @element).removeClass 'active'\n      @active = @slides.eq(to)\n      @active.addClass 'active'\n\n      # Set next\n      $('.next', @element).removeClass 'next'\n      @slides.eq(@next).addClass 'next'\n\n      # Clear Timeouts\n      if from != -1\n        setTimeout =>\n          @clear_timeouts from\n          return\n        , @data[from].background[0].animation[@data[from].background[0].duration].duration * 1000\n      @clear_timeouts to\n\n      # Call layouts slide call\n      @eval.layouts 'slide', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'slide', [from, to]\n\n      # Slidea specific slide method\n      @transition from, to\n\n      # Set Current\n      @current = to\n      @log \"Indexes are current: #{@current}, previous: #{@prev}, next: #{@next}.\"\n\n      # Go to the next slide after the slide specific duration\n      if @settings.autoplay is true\n        @timer.start = new Date\n        @timer.remaining = @data[to].background[0].duration\n        clearTimeout @timer.clock\n        @timer.clock = setTimeout((=>\n          if @settings.loop isnt true and to + 1 == @slides_length - 1\n            @log \"Looping is off. Autoplay stops here.\"\n            return\n          @slide to + 1\n          return\n        ), @timer.remaining)\n        @log \"Autoplay timer has been reset.\"\n\n      # Trigger transition event\n      @element.trigger 'slidea.transition', [\n        from\n        to\n        @prev\n        @next\n        @slides_length\n        @active\n      ]\n      return\n\n    ###\n    Set the index of the next and previous slides\n    ###\n    @set_adjacent_slides = (to) =>\n      @next = if to + 1 > @slides_length - 1 then 0 else to + 1\n      @prev = if to - 1 < 0 then @slides_length - 1 else to - 1\n      return\n\n    ###\n    Apply animations for all slider elements. Run previous slide out animation\n    and set time required to crossfade slides\n\n    @param i [Fixnum] Current slide index\n    @param prev [Fixnum] Previous slide index\n    ###\n    @transition = (from, to) =>\n      # Call layouts transition call\n      @eval.layouts 'transition', [from, to]\n\n      # Call modules transition call\n      @eval.modules 'transition', [from, to]\n\n      # Staggering timeout when using grid layouts\n      from_stagger = 0\n\n      # Transition timeout, used for overlapping transitions\n      timeout = 0\n\n      # Clear main animation timeout to prevent bad behaviour for unusual\n      # request counts (click spamming)\n      clearTimeout @animate_timeout\n\n      # Run animateOut animation for previous slide\n      if from != -1\n        @transition_run from, 'out'\n\n        from_slide_duration = @data[from].background[0].duration\n        if @data[from].background[0].animation[from_slide_duration]\n          timeout += @data[from].background[0].animation[from_slide_duration].duration * 1000\n\n      # If we want the slides to play one after another, the overlap parameter\n      # should be 1, otherwise 0. Everything in between will cause partial\n      # overlapping\n      timeout *= @settings.overlap\n      timeout = 0 if timeout < 0 # For non autoplay sliders\n\n      # Runs active slide animation timeline for background, layers and objects\n      #\n      # Set a timeout to overlap, depending on slider settings\n      @animate_timeout = setTimeout =>\n        @transition_run to, 'in'\n        return\n      , timeout\n\n      # Call layouts slide call\n      @eval.layouts 'after_transition', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'after_transition', [from, to]\n\n      return\n\n    ###\n    Run initial transition animations for the slide\n    ###\n    @transition_run = (index, mode) =>\n      # Set current slide variables\n      slide = @slides.eq(index)\n      canvas = $ @settings.selector.canvas, slide\n      layers = $ @settings.selector.layerWrapper, slide\n      objects = $ @settings.selector.object, slide\n\n      # Background animations\n      if @settings.layoutSettings.animate_background isnt false\n        @log \"Running animations for background.\"\n\n        @transition_animate index, slide, 'background', 0, mode, false\n\n      # Layer animations\n      layers.each (layer_index, layer) =>\n        @log \"Running animations for layer #{layer_index}.\"\n\n        @transition_animate index, $(layer), 'layer', layer_index, mode, false\n        return\n\n      # Object animation\n      objects.each (object_index, object) =>\n        @log \"Running animations for object #{object_index}.\"\n\n        @transition_animate index, $(object), 'object', object_index, mode, false\n        return\n      return\n\n\n    ###\n    Validate transition index for given animation element\n    ###\n    @transition_validate = (i, index, element, context, context_index, mode) =>\n      slide_duration = @data[i].background[0].duration\n      index = parseInt index\n\n      switch mode\n        when 'in'\n          return index != 'initial' &&                                                    # Not initial state\n            index != -1 &&                                                                # Not -1 state\n            !isNaN(index) &&                                                              # Not NaN\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state) &&  # Not empty object\n            (slide_duration == -1 or slide_duration != -1 and index < slide_duration)     # Not > slide_duration\n        when 'out'\n          return index != 'initial' &&                                                    # Not initial state\n            (index == -1 or slide_duration != -1 and index >= slide_duration) &&        # Is -1 state or > slide_duration\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state)     # Not empty object\n        else\n          return true\n\n    ###\n    Runs animation for current slide, generalized for background, layers and\n    objects\n\n    @param i [Fixnum] Slide index\n    @param $element [Object] Element on which animation is applied\n    @param context [String] Current animation cache accessor\n    @param context_index [Fixnum] Current animation cache accessor index\n    ###\n    @transition_animate = (i, element, context, context_index, mode, in_loop, callback) =>\n      # Set initial animation position for active slide\n      slide_duration = @data[i].background[0].duration\n\n      # Set initial state for element\n      unless mode == 'out' || in_loop || !@data[i][context][context_index].animation.initial?\n        @animate.set element, @data[i][context][context_index].animation.initial.state\n\n        if 'callback' of @data[i][context][context_index]\n          @data[i][context][context_index].callback.call @, element, 'initial'\n\n\n      # Run each background animation as long as the animation index isn't greater\n      # than the slide's preview duration\n      $.each @data[i][context][context_index].animation, (index, animation) =>\n        if !@transition_validate(i, index, element, context, context_index, mode)\n          return\n\n        @log \"Running #{mode} transition[#{index}] for #{context}[#{context_index}].\"\n        @log @data[i][context][context_index].animation[index]\n\n        # Set animation timeout\n        if mode == 'in'\n          timeout = index\n        else\n          timeout = slide_duration - parseInt(index)\n\n        # Set in loop timeout and stop if it's negative. Negative values mean\n        # that the animation is outside the loop\n        if in_loop\n          timeout = timeout - @data[i][context][context_index].loop_diff\n          return if timeout < 0\n\n        # Set timeout for each animation, with it's state\n        @data[i][context][context_index].animation[index].timeline = setTimeout =>\n          if 'callback' of @data[i][context][context_index]\n            @data[i][context][context_index].callback.call @, element, index\n\n          if typeof @data[i][context][context_index].animation[index].state == 'string'\n            @animate_preset element, @data[i][context][context_index].animation[index]\n          else\n            @animate.to element,\n              @data[i][context][context_index].animation[index].duration,\n              @data[i][context][context_index].animation[index].state\n          return\n        , timeout\n        return\n\n      # If we have a loop, calculate timeout to the next animation iteration and\n      # restart animation with loop parameters\n      if @data[i][context][context_index].loop\n        if in_loop\n          loop_timeout = @data[i][context][context_index].loop - @data[i][context][context_index].loop_diff\n        else\n          loop_timeout = @data[i][context][context_index].loop\n\n        @data[i][context][context_index].loop_timeout = setTimeout =>\n          @transition_animate i, element, context, context_index, mode, true\n          return\n        , loop_timeout\n\n      return\n\n    ###\n    Grid animation wrapper to run a callback after grid animation ends\n    ###\n    @run_grid_transition = (to, $element, context, context_index, in_loop)  =>\n      to_slide = @slides.eq(to)\n      @run_transition i, $element, context, context_index, in_loop, =>\n        $.Velocity.hook $('.slidea-background-main', to_slide), 'opacity', 1\n        $('.slidea-grid', to_slide).velocity opacity: 0, 20\n        return\n      return\n\n\n    ###\n    Run animus animation preset\n    ###\n    @animate_preset = (element, data) =>\n      @log \"Animating preset #{data}.\"\n      timeout = 0\n      $.each $.animus.presets[data.state], (index, animation) =>\n        duration = data.duration * animation[1]\n        setTimeout =>\n          @animate.to element,\n            duration,\n            $.animus.presets[data.state][index][0]\n          return\n        , timeout * 1000\n        timeout += duration\n        return\n      return\n\n    ###\n    Registers modules and layouts which are loaded\n    ###\n    @register = =>\n      # Create instances of registered layouts\n      @layouts = {}\n      $.each $.slidea.layouts, (index, value) =>\n        @layouts[index] = new value\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @layouts[index].settings?\n          if @settings.layoutSettings?\n            @settings.layoutSettings = $.extend true, {}, @layouts[index].settings, @settings.layoutSettings\n          else\n            @settings.layoutSettings = @layouts[index].settings\n\n        @log \"Layout \\\"#{index}\\\" registered.\"\n        return\n\n      # Register modules\n      @modules = {}\n      $.each $.slidea.modules, (index, module) =>\n        # Create module instance\n        @modules[index] = new module\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @modules[index].settings?\n          if @settings[index]?\n            if typeof(@modules[index].settings) is 'object'\n              @settings[index] = $.extend true, {}, @modules[index].settings, @settings[index]\n          else\n            @settings[index] = @modules[index].settings\n\n        @log \"Module \\\"#{index}\\\" registered.\"\n        @log @modules[index]\n        return\n\n      @log \"Settings changed after module registration.\"\n      @log @settings\n      return\n\n    ###\n    Method call wrapper for layout and modules\n    ###\n    @eval = {}\n\n    ###\n    Setup wrapper function for calling layout method\n    ###\n    @eval.layouts = (method, args) =>\n      args = [] unless args?\n\n      # Call layout method if it exists\n      if @layouts[@settings.layout]\n        if @layouts[@settings.layout][method]?\n          @layouts[@settings.layout][method].apply this, args\n      else\n        @error \"Couldn't find any valid layouts with the name \\\"#{@settings.layout}\\\".\"\n      return\n\n    ###\n    Setup wrapper function for calling modules method\n    ###\n    @eval.modules = (method, args) =>\n      args = [] unless args?\n\n      # Call module method if it exists\n      $.each @modules, (name, module) =>\n        if @settings[name]? and\n           (@settings[name].enabled == true or @settings[name] == true) and\n           @modules[name][method]?\n          @modules[name][method].apply this, args\n      return\n\n    ###\n    Get data such as height, width and animations for the slide with\n    the current index\n    ###\n    @get_slide_data = (index) =>\n      @data[index].background = {}\n      @data[index].layer = {}\n      @data[index].object = {}\n\n      slide = @slides.eq(index)\n      slide_background = $(@settings.selector.background, slide)\n      slide_layers = $(@settings.selector.layer, slide)\n      slide_objects = $(@settings.selector.object, slide)\n\n      # Get background data\n      slide_background.each (background_index, background) =>\n        background = $(background)\n        @data[index].background[background_index] = @get_data(\n          index, 'background', background_index, slide, @check_image(background), @settings.duration\n        )\n\n        @log \"Received data for slide #{index} -> background #{background_index}.\"\n        @log @data[index].background[background_index]\n        return\n\n      if slide_background.length == 0\n        @data[index].background[0] = @get_data(\n          index, 'background', 0, slide, null, @settings.duration\n        )\n\n      # Layer animation values based on the background transitions\n      default_duration = @data[index].background[0].duration\n      # @deprecated 2.1\n      # default_duration = @data[index].background[0].duration - (@data[index].background[0].animation[0].duration / 2)\n      # @deprecated 2.0\n      # default_start = @data[index].background[0].animation[@data[index].background[0].start].duration\n\n      # Cache layers by determining whether they are images or object layers\n      slide_layers.each (layer_index, layer) =>\n        layer = $(layer)\n        @data[index].layer[layer_index] = @get_data(\n          index, 'layer',layer_index, layer, @check_image(layer), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> layer #{layer_index}.\"\n        @log @data[index].layer[layer_index]\n        return\n\n      # Cache objects by determining whether they are images or object layers\n      slide_objects.each (object_index, object) =>\n        object = $(object)\n        @data[index].object[object_index] = @get_data(\n          index, 'object', object_index, object, @check_image(object), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> object #{object_index}.\"\n        @log @data[index].object[object_index]\n        return\n\n      # Get module specific data\n      @eval.modules 'get_slide_data', [\n        index\n        slide\n        slide_background\n        slide_layers\n        slide_objects\n      ]\n\n      @log \"Finished gathering data for all elements.\"\n      return\n\n    ###\n    Get element animation data based on its type\n\n    @param object [Object] Current data gathering target\n    @param image [Object] Image target from which we gather layer sizes\n    @param type [String] Target type identifier\n    @param duration [Fixnum] Element default on screen display time\n    ###\n    @get_data = (index, context, context_index, object, image, default_duration) ->\n      # String data to parse\n      string = ''\n\n      # JS Data to use for the object\n      js_data = false\n\n      # Get JS Settings object\n      slide_id = @slides.eq(index).attr 'id'\n      slide_classes = @slides.eq(index).attr 'class'\n\n\n      if @settings.slide?\n        slide_js_data = []\n\n        # Get slide data by index\n        if @settings.slide[index]?\n          slide_js_data.push @settings.slide[index]\n\n        # Get slide data by class\n        if slide_classes?\n          $.each slide_classes.split(' '), (index, slide_class) =>\n            if @settings.slide['.' + slide_class]?\n              slide_js_data.push @settings.slide['.' + slide_class]\n            return\n\n        # Get slide data by id\n        if slide_id? and @settings.slide['#' + slide_id]?\n          slide_js_data.push @settings.slide['#' + slide_id]\n\n        # Get JS data for current object\n        if slide_js_data.length > 0\n          object_id = object.attr 'id'\n          object_classes = object.attr 'class'\n\n          # Gather\n          identifiers = []\n          identifiers.push context_index\n          if object_classes?\n            identifiers = identifiers.concat object_classes.split(' ').map (element) -> '.' + element\n          if object_id?\n            identifiers.push '#' + object_id\n\n          $.each slide_js_data, (index, slide_js_data) =>\n            if slide_js_data[context]?\n              $.each identifiers, (index, identifier) =>\n                if slide_js_data[context]? and slide_js_data[context][identifier]?\n                  if js_data\n                    js_data = $.extend js_data, slide_js_data[context][identifier]\n                  else\n                    js_data = $.extend {}, slide_js_data[context][identifier]\n                return\n            return\n\n      # Handler stacks for animation timing\n      time_stack = []\n      current_time_stack = 0\n      animation_stack = {}\n\n      # Set Element\n      data = {}\n      data.type = context\n      data.animation = {}\n\n      # Get the sizes of the loaded image element\n      if image != null\n        image_size = @get_image_size image\n\n        data.width = image_size.width\n        data.height = image_size.height\n\n      # Get data for the layer position and size\n      if context is 'layer'\n        data.position = {}\n\n        if object.attr('data-slidea-width')?\n          data.width = parseFloat(object.attr('data-slidea-width'))\n        else if js_data and js_data.width?\n          data.width = parseFloat @delete_property js_data, 'width'\n\n        if object.attr('data-slidea-height')?\n          data.height = parseFloat(object.attr('data-slidea-height'))\n        else if js_data and js_data.height?\n          data.height = parseFloat @delete_property js_data, 'height'\n\n        # Get top or bottom offset\n        if object.attr('data-slidea-top')?\n          data.position.top = parseFloat(object.attr('data-slidea-top'))\n        else if js_data and js_data.top?\n          data.position.top = parseFloat @delete_property js_data, 'top'\n        else if object.attr('data-slidea-bottom')?\n          data.position.bottom = parseFloat(object.attr('data-slidea-bottom'))\n        else if js_data and js_data.bottom?\n          data.position.bottom = parseFloat @delete_property js_data, 'bottom'\n        else\n          data.position.top = 0\n\n        # Get left or right offset\n        if object.attr('data-slidea-left')?\n          data.position.left = parseFloat(object.attr('data-slidea-left'))\n        else if js_data and js_data.left?\n          data.position.left = parseFloat @delete_property js_data, 'left'\n        else if object.attr('data-slidea-right')?\n          data.position.right = parseFloat(object.attr('data-slidea-right'))\n        else if js_data and js_data.right?\n          data.position.right = parseFloat @delete_property js_data, 'right'\n        else\n          data.position.left = 0\n\n      # Starting time for layer animation\n      if object.attr('data-slidea-start')?\n        data.start = parseFloat(object.attr('data-slidea-start'), 10)\n      else if js_data and js_data.start?\n        data.start =  parseInt @delete_property js_data, 'start'\n      else\n        data.start =  0\n\n      # Get Initial State\n      initial_state = object.attr('data-slidea')\n      initial_state = object.attr('data-slidea-initial') unless initial_state?\n      initial_state = @delete_property js_data, 'initial' unless initial_state?\n\n      if initial_state?\n        starting_animation = initial_state\n      else if context == 'background'\n        starting_animation = @settings.animation.initial\n      else\n        starting_animation = ''\n\n      ###\n      This sets the initial state of our animated object\n      The entering animation will be set as css and will\n      transition to the default state\n      ###\n      animation_stack[data.start] = starting_animation\n      time_stack[current_time_stack++] = data.start\n\n\n      ###\n      Set animation in override to set a different beginning state\n      other than the default one\n      ###\n      if object.attr('data-slidea-in')?\n        initial_animation_override = @animus.get object.attr('data-slidea-in')\n      else if js_data and js_data.in?\n        initial_animation_override = @animus.get @delete_property(js_data, 'in')\n      else\n        initial_animation_override = false\n\n      # Get Animation Timeline\n      timeline = object.data()\n      $.each timeline, (key, value) ->\n        time = undefined\n        # Check if data key matches animation\n        if (time = key.match(/slideaAt([0-9]+)/)) != null\n          at_time = parseInt(time[1], 10)\n\n          # Set value animation at time\n          animation_stack[at_time] = value\n\n          # Add time to time stack\n          time_stack[current_time_stack++] = at_time\n        return\n\n\n      # Get animation data from JS\n      $.each js_data, (index, value) =>\n        return unless /[0-9]+/.test index\n\n        animation_stack[index] = value\n        time_stack[current_time_stack++] = index\n        return\n\n      # Set ending time as default duration or when last animation ends\n      last_time = 0\n\n      ###\n      The time stack is needed to maintain the order of\n      the object animations since JSON objects aren't ordered\n      ###\n      time_stack.sort()\n      $.each time_stack, (key, time) =>\n        data.animation[time_stack[key]] = @animus.get animation_stack[time_stack[key]]\n        if time > last_time\n          last_time = time\n        return\n\n      ###\n      For backgrounds, we allow splitting images into tiles using set rows and\n      columns.\n      ###\n      if context is 'background'\n        data.grid = @get_grid_data(object)\n\n      # Get display time\n      duration = object.attr('data-slidea-duration')\n      if !duration? and js_data and js_data.duration?\n        duration = @delete_property js_data, 'duration'\n\n      if @settings.autoplay is false\n        data.duration = -1\n      else if duration?\n        data.duration = parseFloat(duration, 10)\n      else\n        data.duration = parseFloat(default_duration, 10)\n\n      # Get Exit Animation\n      if object.attr('data-slidea-out')?\n        out_animation = object.attr('data-slidea-out')\n      else if js_data and js_data.out?\n        out_animation = @delete_property js_data, 'out'\n      else if context == 'background'\n        out_animation = @settings.animation.out\n      else\n        out_animation = ''\n\n      # Set ending animation unless we have a null string\n      if out_animation != ''\n        if context == 'background'\n          if data.duration == -1 or data.duration > last_time + data.animation[last_time].duration\n            end_time = data.duration\n          else\n            end_time = last_time + data.animation[last_time].duration\n        else\n          end_time = data.duration\n\n        data.animation[end_time] = @animus.get out_animation\n\n      ###\n      Set reset state by getting all the animation variables\n      and setting them to the default values\n      ###\n      if $.type(data.animation[data.start].state) isnt 'string'\n        # Get animation with resets, meaning besides initial values, we pass through all other\n        # data animations and set default values for them as well\n        data.animation.initial =\n          timeline: null\n          duration: 0\n          state: @animus.reset data.animation[data.start].state, data.animation\n\n        # Set initial opacity to 1\n        unless 'opacity' of data.animation.initial.state\n          data.animation.initial.state.opacity = 1\n\n        # Set initial animation as a forcefed animation, meaning we use the\n        # initial state as final state, and we override the default state,\n        # if applicable\n        data.animation[data.start].state = @animus.reset initial_animation_override.state, data.animation\n\n        # Add initial state's easing to the first animation state\n        if 'ease' of data.animation.initial.state\n          data.animation[data.start].state.ease = data.animation.initial.state.ease\n\n      # Set looping timeout\n      if object.attr('data-slidea-loop')?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n      else if js_data and js_data.loop?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n        @delete_property js_data, 'loop'\n      else\n        data.loop = false\n\n      # Set animation callback\n      if js_data and js_data.callback?\n        data.callback = js_data.callback\n\n      # Get module specific data\n      @eval.modules 'get_data', [\n        data,\n        index,\n        context,\n        context_index,\n        object,\n        image,\n        default_duration,\n      ]\n\n      return data\n\n    ###\n    Get grid data for the given background object\n    ###\n    @get_grid_data = (object) =>\n      grid = {}\n\n      rows = object.attr('data-slidea-grid-rows')\n      grid.rows = if rows?\n        parseInt rows, 10\n      else\n        @settings.grid.rows\n\n      columns = object.attr('data-slidea-grid-columns')\n      grid.columns = if columns?\n        parseInt columns, 10\n      else\n        @settings.grid.columns\n\n      stagger = object.attr('data-slidea-grid-stagger')\n      grid.stagger = if stagger?\n        parseInt stagger, 10\n      else\n        @settings.grid.stagger\n\n\n      if grid.columns > 1 or grid.rows > 1\n        grid.enabled = true\n        object.addClass 'slidea-grid-slide'\n\n      return grid\n\n\n    ###\n    Get the size of an image element\n    ###\n    @get_image_size = (image) =>\n      size = {}\n\n      # Get image width\n      size.width = if image[0].naturalWidth?\n                    image[0].naturalWidth\n                   else if image[0].width?\n                    image[0].width\n                   else if image.width?\n                    image.width()\n                   else\n                    'auto'\n\n      # Get image height\n      size.height = if image[0].naturalHeight?\n                      image[0].naturalHeight\n                    else if image[0].height?\n                      image[0].height\n                    else if image.height?\n                      image.height()\n                    else\n                      'auto'\n\n      return size\n\n    ###\n    Verify if the first required slides have been loaded\n    ###\n    @check_loaded = (callback) =>\n      initial = @loaded\n\n      if @settings.preload == 'fast'\n        dynamic = 'load_first'\n\n        @loaded = (\n          @slides_loaded.indexOf(@prev) != -1 and\n          @slides_loaded.indexOf(@first_slide) != -1 and\n          @slides_loaded.indexOf(@next) != -1\n        )\n\n        # All slides have been loaded\n        if @slides_loaded.length == @slides_length\n          # Enable modules\n          @eval.layouts 'load'\n\n          # Enable layouts\n          @eval.modules 'load'\n\n      else\n        dynamic = 'load'\n\n        @loaded = (@slides_loaded.length == @slides_length)\n\n      # Initial load callback, useful for the fast mode because we don't want to\n      # call the callback multiple times\n      if !initial and @loaded\n        @log \"Required number of slides has been loaded.\"\n\n        # Enable layouts\n        @eval.layouts dynamic\n\n        # Enable modules\n        @eval.modules dynamic\n\n        # Trigger Load event\n        @element.trigger 'slidea.load'\n\n        # Apply callback\n        callback.call()\n\n      return\n\n    ###\n    Load function to imagesLoaded images and cache slide animations\n    ###\n    @load = (callback) ->\n      @slides_loaded = []\n\n      # Preload images from all the slides\n      @slides.each (index, slide) =>\n        slide = $(slide)\n        slide_images = $('img', slide)\n\n        if slide_images.length == 0\n          @log \"No images to load for slide #{index}.\"\n          @get_slide_data index\n\n          # Add slide to loaded slides\n          @slides_loaded.push index\n          @check_loaded callback\n          return\n\n        # Preload images from current slide\n        images_loaded = 0\n        slide_images.each (image_index, image) =>\n          if $(image).attr('data-slidea-src')?\n            src = $(image).attr('data-slidea-src')\n          else\n            src = $(image).attr('src')\n\n          image_loader = $(\"<img>\")\n          image_loader.attr 'src', src\n\n          # Set image sizes on load\n          image_loader.load =>\n            # Set actual src attribute to the loaded images\n            $(image).attr 'src', src\n\n            # When all images are loaded, gather slide data for current slide\n            images_loaded += 1\n            if images_loaded == slide_images.length\n              @log \"Loaded images for slide #{index}.\"\n              @get_slide_data index\n\n              # After gathering data, set the size for the current slide\n              @eval.layouts 'resize_slide', [index]\n\n              # Add slide to loaded slides\n              @slides_loaded.push index\n\n              # Call callback if slides are loaded\n              @check_loaded callback\n            return\n          return\n        return\n\n\n    ###\n    Checks if given element is an image and returns it,\n    otherwise it returns null\n    ###\n    @check_image = (element) =>\n      if element.is 'img'\n        return element\n      else\n        return null\n\n    ###\n    Resize the slider by setting sizes in current context\n    ###\n    @resize = =>\n      # Initialize modules\n      @eval.modules 'before_resize'\n\n      @set_responsive_context()\n      @set_parent_sizes()\n\n      # Initialize layouts\n      @eval.layouts 'resize'\n\n      # Initialize modules\n      @eval.modules 'resize'\n\n      @log \"Slider elements have been resized.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_resize = =>\n      @window.resize =>\n        @resize()\n\n        @element.trigger 'slidea.resize', [\n          @window_width\n          @window_height\n          @current_responsive_size\n        ]\n\n        return\n\n      @log \"Bound window resize event.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_focus = =>\n      return unless @settings.autoplay and @settings.pauseOnBlur\n\n      @window.focus =>\n        @unpause_timer()\n        return\n\n      @window.blur =>\n        @pause_timer()\n        return\n      return\n\n    ###\n    Bind inner button links\n    ###\n    @bind_inner_links = =>\n      $('[data-slidea-href]', @element).each (index, element) =>\n        element = $(element)\n        href = element.attr 'data-slidea-href'\n\n        if /^[0-9]+/.test href\n          href = parseInt href\n        else if /^\\#[a-zA-Z\\_][a-zA-Z0-9\\_\\-]*/.test href\n          return unless $(href).hasClass 'slidea-slide'\n          href = $(href).index()\n\n        element.on 'click', =>\n          @slide href\n          return\n        return\n      return\n\n    ###\n    Set the z-index of each of the @layers\n    ###\n    @set_layers_zindex = =>\n      @log \"Setting layer z-index starting from #{@settings.layerIndex}.\"\n\n      @slides.each (si, slide) =>\n        layers = $(\".slidea-layer-wrapper\", $(slide))\n        layer_count = layers.length\n        layers.each (li, layer) =>\n          $(layer).css \"z-index\", @settings.layerIndex + layer_count - li\n          return\n        return\n      return\n\n    ###\n    Set current responsive range parameter as xs,sm,md or lg\n    ###\n    @set_responsive_context = =>\n      if @window_width >= @settings.screen.xlg\n        @current_responsive_size = 'xlg'\n      else if @window_width >= @settings.screen.lg\n        @current_responsive_size = 'lg'\n      else if @window_width >= @settings.screen.md\n        @current_responsive_size = 'md'\n      else if @window_width >= @settings.screen.sm\n        @current_responsive_size = 'sm'\n      else\n        @current_responsive_size = 'xs'\n\n      @log \"Responsive context is \\\"#{ @current_responsive_size }\\\".\"\n\n      return\n\n    ###\n    Sets the size of the slide relevant parents\n    ###\n    @set_parent_sizes = =>\n      # Set Size Setup\n      @window_width = @window.width()\n      @window_height = @window.height()\n\n      # @Parent Size\n      @parent_width = @parent.width()\n      @parent_height = @parent.height()\n\n      # @Wrapper Size\n      @wrapper_width = @wrapper.width()\n      @wrapper_height = @wrapper.height()\n\n      @log \"Parent size is #{@parent_width} x #{@parent_height}\"\n      @log \"Window size is #{@window_width} x #{@window_height}\"\n      @log \"Wrapper size is #{@wrapper_width} x #{@wrapper_height}\"\n\n      return\n\n    ###\n    Add the actual classes to the Slidea selector classes\n    ###\n    @add_classes = =>\n      # $(@settings.selector.slide, @element).addClass \"slidea-slide\"\n      # $(@settings.selector.content, @element).addClass \"slidea-content\"\n      # $(@settings.selector.background, @element).addClass \"slidea-background\"\n      # $(@settings.selector.videoBackground, @element).addClass \"slidea-video-background\"\n      # $(@settings.selector.video, @element).addClass \"slidea-video\"\n      # $(@settings.selector.videoCover, @element).addClass \"slidea-video-cover\"\n      # $(@settings.selector.layer, @element).addClass \"slidea-layer\"\n      # $(@settings.selector.object, @element).addClass \"slidea-object\"\n      # $(@settings.selector.next, @element).addClass \"slidea-next\"\n      # $(@settings.selector.prev, @element).addClass \"slidea-prev\"\n      # $(@settings.selector.pagination, @element).addClass \"slidea-pagination\"\n\n      @log \"Added additional classes.\"\n      return\n\n    ###\n    Wrap all the elements into slidea specific classes\n    ###\n    @wrap_objects = =>\n      # Wrap background and layers with .slidea-canvas\n      $(@settings.selector.slide, @element).each (i, slide) =>\n        $(@settings.selector.background + ', ' + @settings.selector.layer, $(slide)).wrapAll \"<div class=\\\"#{ @settings.selector.canvas.substring(1) }\\\"></div>\"\n\n      # Wrap all slides with .slidea-outer > .slidea-inner\n      .wrapAll \"<div class=\\\"#{ @settings.selector.wrapper.substring(1) }\\\"><div class=\\\"#{ @settings.selector.inner.substring(1) }\\\"></div></div>\"\n\n      # Wrap content with .slidea-content-wrapper\n      $(@settings.selector.content, @element).wrap \"<div class=\\\"#{ @settings.selector.contentWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap background with .slidea-background-wrapper\n      $(@settings.selector.background, @element).wrap \"<div class=\\\"#{ @settings.selector.backgroundWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap layers with .slidea-layer-wrapper\n      $(@settings.selector.layer, @element).wrap \"<div class=\\\"#{ @settings.selector.layerWrapper.substring(1) }\\\"></div>\"\n\n      # Call modules and layout method\n      @eval.layouts 'wrap_objects'\n      @eval.modules 'wrap_objects'\n      return\n\n\n    ###\n    Check if element has data-slidea-settings which override default init settings\n    ###\n    @set_data_settings = =>\n      if @element.attr(\"data-slidea-in\")?\n        @settings.animation.in = @element.attr(\"data-slidea-in\")\n      if @element.attr(\"data-slidea-out\")?\n        @settings.animation.out = @element.attr(\"data-slidea-out\")\n      if @element.attr(\"data-slidea-duration\")?\n        @settings.duration = @element.attr(\"data-slidea-duration\")\n      if @element.attr(\"data-slidea-layout\")?\n        @settings.layout = @element.attr(\"data-slidea-layout\")\n\n      @log \"Gathered slider data settings.\"\n\n      return\n\n    ###\n    Set default animation parameters for Slidea animation objects\n    and create animus model\n    ###\n    @init_animus = =>\n      override =\n        duration: @settings.animation.duration\n        easing: @settings.animation.easing\n\n      # Animus\n      @animus = new $.animus(override)\n\n      @log \"Initialized animus parser.\"\n      return\n\n    ###\n    Clears all the set timeouts for the chosen slide in order to stop all\n    programmed animations.\n\n    @version 2.0 Loop timeouts must also be cleared after every slide\n    ###\n    @clear_timeouts = (i) =>\n      if 'background' of @data[i]\n        $.each @data[i].background, (index) =>\n          $.each @data[i].background[index].animation, (animate_index) =>\n            clearTimeout @data[i].background[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].background[index]\n            clearTimeout @data[i].background[index].loop_timeout\n\n      if 'layer' of @data[i]\n        $.each @data[i].layer, (index) =>\n          $.each @data[i].layer[index].animation, (animate_index) =>\n            clearTimeout @data[i].layer[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].layer[index]\n            clearTimeout @data[i].layer[index].loop_timeout\n          return\n\n      if 'object' of @data[i]\n        $.each @data[i].object, (index) =>\n          $.each @data[i].object[index].animation, (animate_index) =>\n            clearTimeout @data[i].object[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].object[index]\n            clearTimeout @data[i].object[index].loop_timeout\n          return\n\n      @log \"Cleared timeouts for slide #{i}.\"\n      return\n\n\n    ###\n    Pause autoplay when mouse is over @element\n    ###\n    @pause_timer = =>\n      current_time = new Date\n      @timer.remaining = @timer.remaining - (current_time - (@timer.start))\n      clearTimeout @timer.clock\n\n      @eval.modules 'pause'\n\n      @element.trigger 'slidea.pause'\n      return\n\n    ###\n    Unpause timer when hovering over @element\n    ###\n    @unpause_timer = =>\n      next_slide = if @current == -1 then 1 else @current + 1\n      clearTimeout @timer.clock\n\n      @timer.start = new Date\n      @timer.clock = setTimeout((=>\n        @slide next_slide\n        return\n      ), @timer.remaining)\n\n      @eval.modules 'resume'\n\n      @element.trigger 'slidea.resume'\n\n      return\n\n\n    ###\n    Helper method\n    ###\n    @next = =>\n      @slide @current + 1\n      return\n\n    ###\n    Helper method\n    ###\n    @prev = =>\n      @slide @current - 1\n      return\n\n    ###\n    Debounce helper to make resize happen every n milliseconds\n    ###\n    @debounce = (func, wait, immediate) ->\n      timeout = undefined\n      ->\n        context = this\n        args = arguments\n\n        later = ->\n          timeout = null\n          if !immediate\n            func.apply context, args\n          return\n\n        callNow = immediate and !timeout\n        clearTimeout timeout\n        timeout = setTimeout(later, wait)\n        if callNow\n          func.apply context, args\n        return\n\n    ###\n    Delete an object property and return its value\n    ###\n    @delete_property = (object, property) ->\n      temporary = object[property]\n      delete object[property]\n      return temporary\n\n    ###\n    Get a random id by concatenating input string\n    with a random number\n    ###\n    @get_random_id = (string) ->\n      return string + '-' + Math.floor((Math.random() * 1000) + 1)\n\n    ###\n    Extend given default settings with user input\n    ###\n    @extend_settings = (id, defaults) =>\n      if @settings[id]?\n        @settings[id] = $.extend {}, defaults, @settings[id]\n      else\n        @settings[id] = defaults\n\n    ###\n    Logger snippet within Slidea\n    ###\n    @log = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.log \"[Slidea]\", item\n      else\n        console.log \"[Slidea] #{item}\"\n      return\n\n    ###\n    Error logger snippet within Slidea\n    ###\n    @error = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.error \"[Slidea]\", item\n      else\n        console.error \"[Slidea] #{item}\"\n      return\n\n    @initialize()\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.modules = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_module = (name, module) ->\n    $.slidea.modules[name] = module\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.layouts = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_layout = (name, layout) ->\n    $.slidea.layouts[name] = layout\n    return\n\n  ###\n  Lightweight plugin wrapper that prevents multiple instantiations.\n  ###\n  $.fn.slidea = (opts) ->\n    @each (index, element) ->\n      unless $.data element, \"slidea\"\n        $.data element, \"slidea\", new $.slidea element, opts\n\n) window.jQuery, window, document\n\n#\n# Default Slidea modules\n#\n\n#=include modules/content-scaling.coffee\n#=include modules/controls.coffee\n#=include modules/keyboard.coffee\n#=include modules/loader.coffee\n#=include modules/mousewheel.coffee\n#=include modules/pagination.coffee\n#=include modules/pause-on-hover.coffee\n#=include modules/prevent-dragging.coffee\n#=include modules/progress-bar.coffee\n#=include modules/retina.coffee\n#=include modules/scroller.coffee\n#=include modules/thumbnails.coffee\n#=include modules/touch.coffee\n#=include modules/video.coffee\n#=include modules/video-cover.coffee\n\n# A factory that uses AMD, CommonJS or window globals to\n# create the jQuery plugin.\n# do (plugin = slidea, window) ->\n#   hasDefine  = typeof define is \"function\" and define.amd?\n#   hasExports = typeof module isnt \"undefined\" and module.exports?\n#\n#   # AMD.\n#   if hasDefine\n#     define [\"jquery\"], plugin\n#\n#   # NodeJS/CommonJS.\n#   else if hasExports\n#     module.exports = plugin require \"jquery\"\n#\n#   # Window globals.\n#   else\n#     plugin window.jQuery or window.$\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.contentScaling = ->\n    ###\n    Enable or disable content scaling feature\n    ###\n    @settings =\n      enabled: false # Scale content based on parent width\n      mode: 'responsive' # natural or responsive\n      factor: # Scale multiplication coefficient\n        xs: 1\n        sm: 1\n        md: 1\n        lg: 1\n        xlg: 1\n\n\n    scale_content = (index) ->\n      return if index == -1\n\n      current_slide = @slides.eq(index)\n      content = $('.slidea-content', current_slide)\n\n      # Set scaling origin\n      origin_x = '0%'\n      if content.hasClass 'slidea-content-center'\n        origin_y = '50%'\n      else if content.hasClass 'slidea-content-bottom'\n        origin_y = '100%'\n      else\n        origin_y = '0%'\n\n\n      # Set reference widths\n      content_width = content.width()\n      calculated_width = @wrapper_width\n\n\n      if @settings.contentScaling.mode is 'responsive'\n        # Calculate scaling value based on current width\n        scaling_value = @settings.contentScaling.factor[@current_responsive_size]\n\n        @animate.set content,\n          scale: scaling_value\n          x:  (calculated_width - content_width * scaling_value) /2\n          transformOriginX: origin_x\n          transformOriginY: origin_y\n      else\n        # Calculate scaling width based on scaling factor\n        scaling_reference = @data[index].background[0].width\n\n        # Calculate scaling value based on current width\n        scaling_value = calculated_width / scaling_reference * @settings.contentScaling.factor[@current_responsive_size]\n\n        # Center content based on current resize value 8\n        if @settings.contentScaling.factor[@current_responsive_size] == 1\n          @animate.set content, x: 0\n        else\n          @animate.set content, x: (calculated_width * (1 - @settings.contentScaling.factor[@current_responsive_size]) / 2)\n\n        # @animate.set content, 'translateX', '-50%'\n        @animate.set content,\n          z: 0\n          transformOriginX: origin_x\n          transformOriginY: origin_y\n          scaleX: scaling_value\n          scaleY: scaling_value\n\n      @log \"Content has been scaled with #{scaling_value}.\"\n\n      return\n\n    ###\n    Scale content on window resize\n    ###\n    @slide = (from, to) ->\n      scale_content.call @, to\n      return\n\n    @resize = ->\n      scale_content.call @, @current\n      return\n    return\n\n  # Add the feature to RockSlider as a new instance\n  #\n  $.slidea.register_module 'contentScaling', $.fn.slidea.contentScaling\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.controls = ->\n    ###\n    Set up slider controls\n    ###\n    @settings =\n      enabled: false # Add next / prev buttons\n      thumbnail: false # Add thumbnail to controls\n      html:\n        prev: \"&lt;\"\n        next: \"&gt;\"\n      class: \"slidea-controls-alternate\" # Additional control classes\n\n    ###\n    Slider Initialization Event\n    ###\n    @initialize = ->\n      @settings.controls.enabled = false if @slides_length == 1\n      return\n\n    ###\n    Update slide data\n    ###\n    @get_slide_data = (index, slide) ->\n      if @settings.controls.thumbnail and !@data[index].thumbnail?\n        thumbnail = slide.attr('data-slidea-thumbnail')\n        if thumbnail?\n          @data[index].thumbnail = thumbnail\n        else\n          @data[index].thumbnail = $(@settings.selector.background, slide).attr('src')\n      return\n\n    ###\n    Add controls to the slider\n    ###\n    @load = ->\n      html = ''\n      for control in ['next', 'prev']\n        alt = control.toLowerCase().replace /\\b[a-z]/g, (letter) ->\n          return letter.toUpperCase()\n\n        html += '<a href=\"javascript:void(0);\" class=\"slidea-control slidea-' + control + ' ' + @settings.controls.class + '\">'\n        html += '<div class=\"slidea-control-inner\">'\n        if @settings.controls.thumbnail is true\n          html += '<div class=\"slidea-control-thumbnail\">'\n          html += '<img src=\"\" alt=\"' + alt + ' Slide\" class=\"slidea-control-image\"/>'\n          html += '</div>'\n        html += '<div class=\"slidea-control-text\">'\n        html += @settings.controls.html[control]\n        html += '</div>'\n        html += '</div>'\n        html += '</a>'\n\n      # Add controls HTML\n      @wrapper.append html\n\n      # Set previous button\n      @prev_button = $(@settings.selector.prev, @element)\n      @prev_button.on 'click', =>\n        @slide @current - 1\n        return\n\n      # Set next button\n      @next_button = $(@settings.selector.next, @element)\n      @next_button.on 'click', =>\n        @slide @current + 1\n        return\n\n      # Set thumbnails\n      if @settings.controls.thumbnail is true\n        @prev_thumbnail = $('.slidea-control-image', @prev_button)\n        @next_thumbnail = $('.slidea-control-image', @next_button)\n\n      return\n\n    ###\n    Run on slide modifiers for controls\n    ###\n    @slide = (from, to) ->\n      if @settings.controls.thumbnail\n        @prev_thumbnail.attr 'src', @data[@prev].thumbnail\n        @next_thumbnail.attr 'src', @data[@next].thumbnail\n\n        @log \"Changed control thumbnails to prev[#{from}] and next[#{to}].\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'controls', $.fn.slidea.controls\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.keyboard = ->\n    ###\n    Enable or disable keyboard handler\n    ###\n    @settings = true\n\n    ###\n    Add keyboard bindings\n    ###\n    @load = ->\n      $(document).keydown (e) =>\n        switch e.which\n          when 37 then @slide @current - 1\n          when 39 then @slide @current + 1\n          else return\n      @log \"Bound keyboard arrows event.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'keyboard', $.fn.slidea.keyboard\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.loader = ->\n    ###\n    Enable or disable loader component\n    ###\n    @settings = true\n\n    ###\n    Add the loader element if it hasn't been added with HTML\n    ###\n    @initialize = ->\n      if $(\".slidea-loader-wrapper\", @element).length is 0\n        html = \"\"\n        html += '<div class=\"slidea-loader-wrapper\">'\n        html += '<div class=\"slidea-loader\">'\n        html += '<div class=\"slidea-loader-inner\">'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '</div>'\n        html += '</div>'\n        # html += '<div class=\"slidea-loader-text\">'\n        # html += '<h5 class=\"slidea-loader-title font-normal\">'\n        # html += 'SLIDEA'\n        # html += '</h5>'\n        # html += '<h6 class=\"slidea-loader-subtitle font-thin\">'\n        # html += 'A Smarter Slider Plugin'\n        # html += '</h6>'\n        # html += '</div>'\n        html += '</div>'\n\n        @element.prepend html\n\n        @log \"No loader found. Added default loader.\"\n      else\n        @log \"Loader markup already exists.\"\n\n      @loader = $(\".slidea-loader-wrapper\", @element)\n      return\n\n    ###\n    When all the slider images have been loaded, hide the\n    loading spinner\n    ###\n    @load = ->\n      @animate.to @loader, 0.5,\n        opacity: 0\n        onComplete: =>\n          @loader.css display: 'none'\n          @log \"Loader element faded out.\"\n          return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'loader', $.fn.slidea.loader\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.mousewheel = ->\n    ###\n    Enable or disable mousewheel handler\n    ###\n    @settings = false\n\n    ###\n    Add mousewheel handler\n    @require mousewheel.js\n    ###\n    @load = ->\n      enabled = true\n      enable_timeout = 750\n\n      # Bind Mousewheel event\n      @element.mousewheel (event) =>\n        return unless enabled\n\n        # Prevent scrolling for a while\n        enabled = false\n\n        if event.deltaY == -1\n          @slide @current + 1\n        if event.deltaY == 1\n          @slide @current - 1\n        if @settings.prevent_scrolling is true\n          event.preventDefault()\n\n        # Reenable scrolling after timeout\n        setTimeout =>\n          enabled = true\n          return\n        , enable_timeout\n\n        return\n\n      @log \"Bound mousewheel event.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'mousewheel', $.fn.slidea.mousewheel\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.pagination = ->\n    ###\n    Set up pagination component\n    ###\n    @settings =\n      enabled: false # Add pagination\n      position: \"bottom\" # top / bottom / left / right / before / after\n      class: \"slidea-pagination-light\" # Additional pagination classes\n\n    ###\n    Add pagination bullets to the slider\n    ###\n    @initialize = ->\n      # Don't add pagination if we have only one slide\n      return if @slides_length == 1\n\n      position = \"slidea-pagination-#{@settings.pagination.position}\"\n\n      html = \"\"\n      html += \"<div class=\\\"slidea-pagination \" + position + \" \" + @settings.pagination.class + \"\\\">\"\n      i = 0\n      while i < @slides_length\n        html += \"<div class=\\\"slidea-pagination-bullet\\\"></div>\"\n        i++\n      html += \"</div>\"\n      pagination = $(html)\n\n      switch @settings.pagination.position\n        when \"before\"\n          @element.before pagination\n        when \"after\"\n          @element.after pagination\n        else\n          @element.prepend pagination\n\n      @pagination = $(\".slidea-pagination-bullet\", pagination)\n      @pagination.each (i, el) =>\n        pagination_bullet = $(el)\n        pagination_bullet.on \"click\", =>\n          @pagination.filter(\".active\").removeClass \"active\"\n          pagination_bullet.addClass \"active\"\n          @slide i\n          return\n        return\n      return\n\n    @slide = (from, to) ->\n      @pagination.filter('.active').removeClass 'active'\n      @pagination.eq(to).addClass 'active'\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'pagination', $.fn.slidea.pagination\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.pauseOnHover = ->\n    ###\n    Enable or disable pause on hover feature\n    ###\n    @settings = false\n\n    ###\n    Pause the slider on mouse hover\n    ###\n    @load = ->\n      @element.on 'mouseenter', =>\n        @pause_timer()\n        return\n      @element.on 'mouseleave', =>\n        @unpause_timer()\n        return\n\n      @log \"Enabled pause on hover.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'pauseOnHover', $.fn.slidea.pauseOnHover\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.preventDragging = ->\n    ###\n    Enable or disable image dragging\n    ###\n    @settings = true\n\n    # Check if current screen is retina. If yes, replace images with their larger\n    # versions using the data-slidea-at2x attribute\n    #\n    @initialize = ->\n      $(\"img\", @element).on \"dragstart\", (event) =>\n        event.preventDefault()\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'preventDragging', $.fn.slidea.preventDragging\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.progressBar = ->\n    ###\n    Set up progress bar element\n    ###\n    @settings =\n      enabled: false # Add progress bar\n      position: \"bottom\" # Progress bar position top / bottom\n      class: \"slidea-progress-light\" # Additional thumbnail classes\n\n    ###\n    Add progress bar\n    ###\n    @load = ->\n      position = (if @settings.progress.position is \"top\" then \"slidea-progress-top\" else \"slidea-progress-bottom\")\n\n      html = \"\"\n      html += \"<div class=\\\"slidea-progress \" + position + \" \" + @settings.progress.class + \"\\\">\"\n      html += \"<div class=\\\"slidea-progress-bar\\\">\"\n      html += \"</div>\"\n      html += \"</div>\"\n      @element.prepend html\n\n      @progress = {}\n      @progress.element = $(\".slidea-progress\", @element)\n      @progress.bar = $(\".slidea-progress-bar\", @element)\n\n      return\n\n    ###\n    Animate progress bar from 0% to 100%\n    ###\n    @slide = (from, to) ->\n      if @progress_animation\n        @progress_animation.kill()\n\n      @progress_animation = @animate.fromTo @progress.bar,\n        @timer.remaining / 1000,\n        { width: '0%' },\n        { width: '100%' }\n      return\n\n    @pause = ->\n      @progress_animation.pause()\n      return\n\n    @resume = ->\n      @progress_animation.resume()\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'progress', $.fn.slidea.progressBar\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.retina = ->\n    ###\n    Enable or disable retina feature\n    ###\n    @settings = true\n\n    # Check if current screen is retina. If yes, replace images with their larger\n    # versions using the data-slidea-at2x attribute\n    #\n    @initialize = ->\n      retina = false\n      root = (exports? ? window : exports)\n      mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)';\n\n      if root.devicePixelRatio > 1\n          retina = true\n\n      if root.matchMedia && root.matchMedia(mediaQuery).matches\n          retina = true\n\n      if retina\n        @log \"This device has a retina display.\"\n\n        $('img[data-slidea-at2x]', $slide).each (index, element) =>\n          img = $(element)\n          src = img.attr('data-slidea-src')\n          retina_src = img.attr 'data-slidea-at2x'\n\n          if retina_src == \"true\"\n            src = src.replace /(\\.[\\w\\?=]+)$/, \"@2x$1\"\n          else\n            src = retina_src\n\n          @log \"Found a Retina image with src=\\\"#{src}\\\".\"\n\n          img.attr 'data-slidea-src', src\n          return\n      else\n        @log \"This device doesn't have a Retina display.\"\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'retina', $.fn.slidea.retina\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.scroller = ->\n    ###\n    Set up scroller component\n    ###\n    @settings =\n      enabled: false # Enable Scroller Item\n      markup: \"<span class=\\\"slidea-scroller-1\\\"></span>\" # Markup for scroller item (1 or 2)\n      position: \"center\" # Scroller position: left, center, right\n\n\n    @load = ->\n      scroller = \"<div class=\\\"slidea-scroller-wrapper slidea-scroller-\" + @settings.scroller.position + \"\\\">\"\n      scroller += @settings.scroller.markup\n      scroller += \"</div>\"\n\n      @scroller = $ scroller\n      @element.prepend @scroller\n\n      @scroller.on \"click\", =>\n        $(\"html, body\").animate scrollTop: @element.height(), 1000\n        return\n      return\n\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'scroller', $.fn.slidea.scroller\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.thumbnails = ->\n    ###\n    Set up slider thumbnails\n    ###\n    @settings =\n      enabled: false # Add thumbnails\n      visible: # Maximum number of thumbnails on page\n        xs: 12\n        sm: 6\n        md: 6\n        lg: 5\n        xlg: 5\n      position: \"bottom\" # Thumbnails position before or after\n      class: \"\" # Additional thumbnail classes\n\n    ###\n    Scroll to the nth thumbnail in the collection\n    ###\n    scroll_to_thumbnail = (to) ->\n      to = 0 if to < 0\n\n      # Calculate distance to thumbnail\n      # thumbnails may have variable sizes\n      distance = 0\n      @thumbnails.elements.each (index, item) =>\n        return false if index == to\n        if @settings.thumbnails.orientation == 'horizontal'\n          distance += $(item).width()\n        else if @settings.thumbnails.orientation == 'vertical'\n          distance += $(item).height()\n        return\n\n      # If distance required is greater than the last set of thumbnails we can\n      # see, then don't go past them\n      if @thumbnails.size - distance < @thumbnails.parent_size\n        distance = @thumbnails.size - @thumbnails.parent_size\n\n      # Set the new starting position\n      @thumbnails.starting_position = -distance\n\n      # Animate the thumbnails to the new position\n      if @settings.thumbnails.orientation == 'horizontal'\n        transform = 'translate3d(' + (-distance) + 'px, 0, 0)'\n      else if @settings.thumbnails.orientation == 'vertical'\n        transform = 'translate3d(0, ' + (-distance) + 'px, 0)'\n\n      # Animate thumbnails inner wrapper\n      @thumbnails.inner.addClass('animating').css\n        'transform': transform\n        '-o-transform': transform\n        '-ms-transform': transform\n        '-moz-transform': transform\n        '-webkit-transform': transform\n      setTimeout =>\n        @thumbnails.inner.removeClass 'animating'\n        return\n      , 700\n      return\n\n    ###\n    Resize thumbnails wrapper\n    ###\n    resize_wrapper = ->\n      return unless @thumbnails.loaded\n\n      # Set thumbnails container size and set padding in case of\n      # vertical orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        thumbnail_height = $('img', @thumbnails.elements.eq(0)).height()\n        @thumbnails.container.height thumbnail_height\n      else if @settings.thumbnails.orientation == 'vertical'\n        thumbnail_width = $('img', @thumbnails.elements.eq(0)).width()\n        @parent.css \"padding-#{@settings.thumbnails.position}\": thumbnail_width\n        @thumbnails.container.width $('img', @thumbnails.elements.eq(0)).width()\n\n      return\n\n    ###\n    Update slide data\n    ###\n    @get_slide_data = (index, slide) ->\n      unless @data[index].thumbnail?\n        thumbnail = slide.attr('data-slidea-thumbnail')\n        if thumbnail?\n          @data[index].thumbnail = thumbnail\n        else\n          @data[index].thumbnail = $(@settings.selector.background, slide).attr('src')\n      return\n\n    ###\n    Initialize thumbnails\n    ###\n    @initialize = ->\n      @thumbnails.loaded = false\n      return\n\n    ###\n    Wrap slidea inside a thumbnails wrapper for position handling\n    ###\n    @wrap_objects = ->\n      @thumbnails = {}\n\n      # Add wrapper\n      @element.wrap \"<div class=\\\"slidea-with-thumbnails #{@settings.thumbnails.position}\\\"><div class='slidea-with-thumbnails-container'></div></div>\"\n\n      # Set new parent elements\n      @parent = @element.parent()\n      @thumbnails.parent = @parent.parent()\n      return\n\n    ###\n    Add thumbnails to the slider\n    ###\n    @load = ->\n      # Set thumbnails orientation\n      if ['left', 'right'].indexOf(@settings.thumbnails.position) != -1\n        @settings.thumbnails.orientation = 'vertical'\n      else\n        @settings.thumbnails.orientation = 'horizontal'\n\n      # Get thumbnails count for the current responsive size\n      thumbs_count = @settings.thumbnails.visible[@current_responsive_size]\n\n      # Get parent sizes\n      parent_height = @wrapper_height\n      parent_width = @wrapper_width\n\n      # Set parameters for horizontal or vertical thumbnails\n      # scrolling orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        individual_size = parent_width / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'width'\n      else if @settings.thumbnails.orientation == 'vertical'\n        individual_size = parent_height / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'height'\n\n      # Thumbnails HTML Code\n      html = \"\"\n      html += \"<div class=\\\"slidea-thumbnails-container\\\">\"\n      html += \"<div class=\\\"slidea-thumbnails #{@settings.thumbnails.class} #{@settings.thumbnails.orientation}\\\">\"\n      html += \"<div class=\\\"slidea-thumbnails-inner\\\" style=\\\"#{css_param}: \" + inner_size + \"px;\\\">\"\n      $.each @data, (index, item) ->\n        html += \"<div class=\\\"slidea-thumbnail-wrapper\\\" style=\\\"#{css_param}: \" + individual_size + \"px;\\\">\"\n        html += \"<img class=\\\"slidea-thumbnail\\\" src=\\\"\" + item.thumbnail + \"\\\" alt=\\\"Slide \" + index + \"\\\" />\"\n        html += \"</div>\"\n      html += \"</div>\"\n      html += \"</div>\"\n      html += \"</div>\"\n\n      # Append thumbnails wrapper\n      @thumbnails.wrapper = $(html)\n      if  [\"top\", \"left\", \"right\"].indexOf(@settings.thumbnails.position) != -1\n        @element.closest('.slidea-with-thumbnails').prepend @thumbnails.wrapper\n      else if @settings.thumbnails.position is \"bottom\"\n        @element.closest('.slidea-with-thumbnails').append @thumbnails.wrapper\n      else\n        @settings.thumbnails.position.append @thumbnails.wrapper\n\n      # Set thumbnails relevant elements\n      @thumbnails.inner = $(\".slidea-thumbnails-inner\", @thumbnails.wrapper)\n      @thumbnails.elements = $(\".slidea-thumbnail-wrapper\", @thumbnails.wrapper)\n      @thumbnails.container = $('.slidea-thumbnails-container', @thumbnails.parent)\n\n      # Set thumbnails inner size and parent size\n      if @settings.thumbnails.orientation == 'horizontal'\n        @thumbnails.size = @thumbnails.inner.width()\n        @thumbnails.parent_size = @thumbnails.wrapper.width()\n      else if @settings.thumbnails.orientation == 'vertical'\n        @thumbnails.size = @thumbnails.inner.height()\n        @thumbnails.parent_size = @thumbnails.wrapper.height()\n\n      # Set thumbnails click event\n      @thumbnails.elements.each (i, el) =>\n        $thumbnail = $(el)\n        $thumbnail.on \"click\", =>\n          @thumbnails.elements.filter(\".active\").removeClass \"active\"\n          $thumbnail.addClass \"active\"\n          @slide i\n          return\n        return\n\n      # Prevent thumbnail image dragging\n      $(\"img\", @thumbnails.elements).on \"dragstart\", (event) ->\n        event.preventDefault()\n        return\n\n      # Startind direction used for animation\n      @thumbnails.starting_position = 0\n      @thumbnails.starting_direction = undefined\n\n      # Set thumbnails on touch events\n      if @settings.touch is true\n        touch_thumbnails = new Hammer @thumbnails.wrapper[0]\n\n        if @settings.thumbnails.orientation == 'horizontal'\n          pan_events = 'panleft panright'\n          touch_thumbnails.get('pan').set\n            direction: Hammer.DIRECTION_HORIZONTAL\n        else if @settings.thumbnails.orientation == 'vertical'\n          pan_events = 'panup pandown'\n          touch_thumbnails.get('pan').set\n            direction: Hammer.DIRECTION_VERTICAL\n\n\n        # Bind touch event to the thumbnails\n        touch_thumbnails.on \"panstart pancancel panend #{pan_events}\", (event) =>\n          if @settings.thumbnails.orientation == 'horizontal'\n            distance = event.deltaX\n          else if @settings.thumbnails.orientation == 'vertical'\n            distance = event.deltaY\n\n          # When moving, sync the slider with the mouse movement\n          if @settings.thumbnails.orientation == 'horizontal' and event.type is 'panleft' or event.type is 'panright'\n            if event.direction is Hammer.DIRECTION_LEFT or event.direction is Hammer.DIRECTION_RIGHT\n              transform = \"translate3d(#{@thumbnails.starting_position + distance}px, 0, 0)\"\n              @thumbnails.inner.css\n                'transform': transform\n                '-o-transform': transform\n                '-ms-transform': transform\n                '-moz-transform': transform\n                '-webkit-transform': transform\n\n          else if @settings.thumbnails.orientation == 'vertical' and event.type is 'panup' or event.type is 'pandown'\n            if event.direction is Hammer.DIRECTION_UP or event.direction is Hammer.DIRECTION_DOWN\n              transform = \"translate3d(0, #{@thumbnails.starting_position + distance}px, 0)\"\n              @thumbnails.inner.css\n                'transform': transform\n                '-o-transform': transform\n                '-ms-transform': transform\n                '-moz-transform': transform\n                '-webkit-transform': transform\n\n          # Get starting transform position\n          else if event.type is 'panstart' and !@thumbnails.inner.hasClass 'animating'\n            @thumbnails.inner.addClass 'slidea-dragging'\n\n            @thumbnails.starting_direction = event.direction\n\n          # When letting go, check if we have enough distance to go to the next slide\n          # otherwise return to the initial position\n          else if event.type is 'panend'\n            @thumbnails.inner.removeClass 'slidea-dragging'\n\n            # Set new starting position\n            @thumbnails.starting_position += distance\n\n            # Don't go past last thumbnail\n            if @thumbnails.starting_position < - @thumbnails.size + @thumbnails.parent_size\n              scroll_to_thumbnail.call @, @slides_length - 1\n\n            # Don't go past first thumbnail\n            else if @thumbnails.starting_position > 0\n              scroll_to_thumbnail.call @, 0\n\n            # Snap to current thumbnail\n            else\n              snap_distance = 0\n              @thumbnails.elements.each (index, item) =>\n                if @thumbnails.starting_position > -snap_distance\n                  scroll_to_thumbnail.call @, index\n                  return false\n\n                if @settings.thumbnails.orientation == 'horizontal'\n                  snap_distance += $(item).width()\n                else if @settings.thumbnails.orientation == 'vertical'\n                  snap_distance += $(item).height()\n\n                return\n\n          event.preventDefault()\n          return\n\n      # Thumbnails are loaded\n      @thumbnails.loaded = true\n\n      # Resize the slider after adding thumbnails\n      $('img', @thumbnails.elements.eq(0)).load =>\n        @resize()\n        return\n\n      return\n\n    # Before resize event\n    #\n    @before_resize = ->\n      # Set wrapper sizes\n      resize_wrapper.call @\n      return\n\n    # Resize thumbnails when window resize happens\n    #\n    @resize = ->\n      return unless @thumbnails.loaded\n\n      thumbs_count = @settings.thumbnails.visible[@current_responsive_size]\n\n      # Get parent sizes\n      parent_height = @wrapper_height\n      parent_width = @wrapper_width\n\n      # Set parameters for horizontal or vertical thumbnails\n      # scrolling orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        individual_size = parent_width / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'width'\n      else if @settings.thumbnails.orientation == 'vertical'\n        individual_size = parent_height / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'height'\n\n      # Set inner and thumbnails width or height\n      @thumbnails.inner[css_param] inner_size\n      @thumbnails.elements[css_param] individual_size\n\n      if @settings.thumbnails.orientation == 'horizontal'\n        @thumbnails.size = inner_size\n      else if @settings.thumbnails.orientation == 'vertical'\n        @thumbnails.size = inner_size\n\n      # Set parent size\n      @thumbnails.parent_size = @thumbnails.wrapper[css_param]()\n\n      # Scroll to current thumbnail\n      scroll_to_thumbnail.call @, @current\n\n      return\n\n    @slide = (from, to) ->\n      return unless @thumbnails.loaded\n\n      @thumbnails.elements.filter('.active').removeClass 'active'\n      @thumbnails.elements.eq(to).addClass 'active'\n      scroll_to_thumbnail.call @, to\n\n      @log \"Scrolled to thumbnail #{to}.\"\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'thumbnails', $.fn.slidea.thumbnails\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.touch = ->\n    ###\n    Enable or disable video features\n    ###\n    @settings = true\n\n    ###\n    Enable touch handler for the slider.\n    @require Hammer.js\n    ###\n    @load = ->\n      # Get touch target\n      @touch_object = new Hammer @element[0]\n\n      # Allow horizontal touch only\n      @touch_object.get('pan').set\n        direction: Hammer.DIRECTION_HORIZONTAL\n\n      # Add panleft and panright events\n      @touch_object.on 'panleft panright', (event) =>\n        # Show dragging cursor on drag start\n        if event.eventType is Hammer.INPUT_START\n          @element.addClass 'slidea-dragging'\n\n        else if event.eventType is Hammer.INPUT_END or event.eventType is Hammer.INPUT_CANCEL\n          @element.removeClass 'slidea-dragging'\n\n          # Swipe left or right based on direction\n          if event.direction is Hammer.DIRECTION_LEFT\n            @slide @current + 1\n          else if event.direction is Hammer.DIRECTION_RIGHT\n            @slide @current - 1\n\n        return\n\n      @log \"Bound touch pan left and right events.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'touch', $.fn.slidea.touch\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.video = ->\n    ###\n    Enable or disable video features\n    ###\n    @settings = true\n\n    ###\n    Setup video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @initialize = ->\n      ###\n      Handle autoplay timeouts using a timeout timeline\n      ###\n      @video_timeline = {}\n\n      delay = 500\n      interval = undefined\n      i = 0\n      tries = 10\n\n      # Handle background videos\n      $('.slidea-video-background').each (index, background) ->\n        unless $(background).hasClass 'slidea-object'\n          $(background).addClass 'slidea-object'\n        return\n\n      $(\"video.slidea-video\", @element).attr \"data-slidea-video-type\", \"html5\"\n      $(\"iframe[data-slidea-src*=\\\"youtube.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"youtube\"\n      $(\"iframe[data-slidea-src*=\\\"vimeo.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"vimeo\"\n\n      $(@settings.selector.video, @element).each (i, el) =>\n        # Get video\n        video = $(el)\n\n        # Get volume\n        volume = video.attr(\"data-slidea-volume\")\n        volume = (if isNaN(volume) then 0 else volume)\n\n        # Get controls\n        controls = (video.attr(\"data-slidea-controls\") is \"true\")\n\n        # Pause slider on video play\n        pause_slider = (video.attr(\"data-slidea-pause-slider\") is \"true\")\n\n        # Get src\n        src = video.attr(\"data-slidea-src\")\n\n        # Get video type\n        video_type = video.attr(\"data-slidea-video-type\")\n\n        # Get video id\n        video.attr \"id\", @get_random_id(\"slidea-video\") unless video.attr(\"id\")?\n        id = video.attr(\"id\")\n\n        # HTML5\n        if video_type is \"html5\"\n          # Set volume\n          video.get(0).volume = volume\n\n          # Enable or disable controls\n          video.attr \"controls\", \"controls\"  if controls is true\n\n          # If slider is set to autoplay, pause the slider when video starts\n          if @settings.autoplay is true and pause_slider is true\n            # On video play\n            video.on \"play\", =>\n              @pause_timer()\n              return\n\n            # On video pause\n            video.on \"pause ended\", =>\n              @unpause_timer()\n              return\n\n\n        # YouTube\n        if video_type is \"youtube\"\n          video_id = undefined\n          separator = undefined\n\n          # Enable video JS API\n          if src.indexOf(\"enablejsapi=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?enablejsapi=1\"\n            else\n              video.attr \"src\", src + \"&enablejsapi=1\"\n            src = video.attr(\"src\")\n\n          # Set player API ID\n          if src.indexOf(\"playerapiid=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?playerapiid=\" + id\n            else\n              video.attr \"src\", src + \"&playerapiid=\" + id\n            src = video.attr(\"src\")\n\n          # Get youtube Video ID\n          if src.indexOf(\"embed\") == \"-1\"\n            video_id = src.split(\"v=\")[1]\n            separator = video_id.indexOf(\"&\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n          else\n            video_id = src.split(\"/\")\n            video_id = video_id[video_id.length - 1]\n            separator = video_id.indexOf(\"?\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n\n\n          # Create a new YT Player using the API\n          video.load =>\n            @youtube_player[id] = new YT.Player(id,\n              height: \"720\"\n              width: \"1280\"\n              video_id: video_id\n              events:\n                onStateChange: (e) =>\n                  @pause_timer()  if e.data is 1\n                  @unpause_timer()  if e.data is 2 or e.data is 0\n                  return\n            )\n\n            # Try to set the video volume\n            i = 0\n            interval = setInterval(=>\n              i++\n              if i is tries\n                clearInterval interval\n              else if not @youtube_player[id]? or typeof @youtube_player[id].setVolume isnt \"function\"\n                return\n              else\n                clearInterval interval\n              @youtube_player[id].setVolume volume\n              return\n            , delay)\n            return\n\n        # Vimeo\n        if video_type is \"vimeo\"\n          # Enable vimeo JS API\n          if src.indexOf(\"api=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?api=1\"\n            else\n              video.attr \"src\", src + \"&api=1\"\n            src = video.attr(\"src\")\n\n          # Setup Vimeo player ID\n          if src.indexOf(\"player_id=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?player_id=\" + id\n            else\n              video.attr \"src\", src + \"&player_id=\" + id\n            src = video.attr(\"src\")\n\n          # Create a new Vimeo Player API\n          video.load =>\n            @vimeo_player[id] = $f(id)\n            @vimeo_player[id].addEvent \"ready\", =>\n              video.attr \"data-slidea-ready\", \"true\"\n              @vimeo_player[id].api \"setVolume\", volume\n              if @settings.autoplay is true and pause_slider is true\n                @vimeo_player[id].addEvent \"play\", @pause_timer\n                @vimeo_player[id].addEvent \"pause\", @unpause_timer\n                @vimeo_player[id].addEvent \"finish\", @unpause_timer\n              return\n            return\n        return\n\n    ###\n    Handle video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @slide = (from, to) ->\n      from_slide = @slides.eq(from)\n      to_slide = @slides.eq(to)\n\n      from_videos = $(@settings.selector.video, from_slide)\n      to_videos = $(@settings.selector.video, to_slide)\n\n      # Pause or stop videos from from slide\n      if from != -1 and from_videos.length > 0\n        from_videos.each (video_index, video)=>\n          # to Video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Get video type\n          video_type = video.attr('data-slidea-video-type')\n\n          # Check if the video resets when next slide is triggered\n          reset = video.attr('data-slidea-reset') == 'true'\n\n          # Clear the video timeout for the to video\n          clearTimeout @video_timeline[id]\n\n          # HTML5\n          if video_type == 'html5'\n            # Pause the video\n            video.get(0).pause()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                video.get(0).current_time = 0\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Youtube\n          else if video_type == 'youtube'\n            # Pause the video\n            @youtube_player[id].pauseVideo()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @youtube_player[id].stopVideo()\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Vimeo\n          else if video_type == 'vimeo'\n            # Pause the video\n            @vimeo_player[id].api 'pause'\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @vimeo_player[id].api 'unload'\n                return\n              ), @data[to].background[0].animation[0].duration\n          return\n\n        @log \"Paused (handled) videos from slide #{from}.\"\n\n      if to_videos.length > 0\n        # Play videos from to slide\n        to_videos.each  (index, video) =>\n          # Get video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Set try interval data\n          i = 0\n          tries = 10\n          delay = 500\n          interval = undefined\n\n          # Check if video should autoplay\n          autoplay = video.attr('data-slidea-autoplay') == 'true'\n          if video.attr('data-slidea-autoplay-time')?\n            autoplay_time = parseInt(video.attr('data-slidea-autoplay-time'), 10)\n          else\n            autoplay_time = 100\n\n          # Check if the video pauses the slider\n          pause_slider = video.attr('data-slidea-pause-slider') == 'true'\n\n          # HTML5\n          if video.attr('data-slidea-video-type') == 'html5'\n            if autoplay == true\n              # Start the video player after the set delay\n              @video_timeline[id] = setTimeout((->\n                video.get(0).play()\n                return\n              ), autoplay_time)\n\n          # Youtube\n          if video.attr('data-slidea-video-type') == 'youtube'\n            if autoplay == true\n              # Try to get the youtube player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        !defined(@youtube_player[id]) or\n                        typeof @youtube_player[id].playVideo != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  @youtube_player[id].playVideo()\n                  return\n                , autoplay_time\n                return\n              , delay\n\n          # Vimeo\n          if video.attr('data-slidea-video-type') == 'vimeo'\n            if autoplay == true\n              # Try to get the vimeo player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        typeof @vimeo_player[id].api != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  Froogaloop(id).api 'play'\n                  return\n                , autoplay_time\n                return\n              , delay\n          return\n\n        @log \"Played (handled) videos from slide #{to}.\"\n      return\n\n    @resize = ->\n      @slides.each (i, element) =>\n        slide = $ element\n        # Fit slidea videos to their containers\n        $(@settings.selector.video, @element).each (i, video)=>\n          video = $(video)\n          parent = video.parent()\n\n          if parent.is('.slidea-video-background')\n            return\n\n          height = parent.height()\n          width = parent.width()\n\n          video.css\n            width: width\n            height: height\n\n          return\n\n        # Set slide to have a full screen Video Background\n        video_background = $('.slidea-video-background', slide)\n        if video_background.length > 0\n          video = $('.video', video_background)\n\n          data_width = parseInt(video.attr('data-slidea-width'))\n          data_height = parseInt(video.attr('data-slidea-height'))\n\n          video_width = @slider_width\n          video_height = video_width * data_height / data_width\n\n          margin_left = -(video_width - (@slider_width)) / 2\n          margin_top = -(video_height - (@slider_height)) / 2\n\n          video.css\n            'width': video_width\n            'height': video_height\n            'margin-left': margin_left\n            'margin-top': margin_top\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'video', $.fn.slidea.video\n\n) window.jQuery, window, document\n","(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.videoCover = ->\n    ###\n    Enable or disable video cover features\n    ###\n    @settings = true \n\n    ###\n    Set up the video covers so that they fade out and play the\n    actual video on click event\n    ###\n    @load = ->\n      hide = (cover) =>\n        @animate.to cover, 0.5,\n          opacity: 0\n          onComplete: =>\n            cover.css display: 'none'\n            return\n        return\n\n      covers = $(@settings.selector.videoCover, @element)\n      covers.each (i, el) =>\n        cover = $(el)\n        parent = cover.parent()\n        video = $(@settings.selector.video, parent)\n        type = video.attr 'data-slidea-video-type'\n        id = video.attr(\"id\")\n        switch type\n          when \"html5\"\n            cover.on \"click\", =>\n              video.get(0).play()\n              hide cover\n              return\n\n          when \"youtube\"\n            cover.on \"click\", =>\n              @youtube_player[id].playVideo()\n              hide cover\n              return\n\n          when \"vimeo\"\n            cover.on \"click\", =>\n              @vimeo_player[id].api \"play\"\n              hide cover\n              return\n\n        return\n      @log \"Added video cover events.\" if covers.length > 0\n      return\n\n    ###\n    Animate progress bar from 0% to 100%\n    ###\n    @slide = (from, to) ->\n      slide = @slides.eq(to)\n      covers = $(@settings.selector.videoCover, slide)\n      covers.each (i, el) =>\n        cover = $(el)\n        cover.css display: 'block'\n        @animate.to cover, 0.5, opacity: 1\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'videoCover', $.fn.slidea.videoCover\n\n) window.jQuery, window, document\n"]}