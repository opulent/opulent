{"version":3,"sources":["slidea/slidea.coffee"],"names":[],"mappings":"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","file":"slidea/slidea.js","sourceRoot":"/source/","sourcesContent":["###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n@guide\n  Running slidea\n    $('.slidea').slidea\n      width: 1280\n      height: 720\n      layout: 'layoutName'\n\n  Using methods\n    $('.slidea').data('slidea').method_name()\n\n  Adding events\n    $('.slidea').on 'eventName', ->\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  # @Slidea\n  $.slidea = (element, options) ->\n    ###\n    Default attribute values\n    ###\n    _defaults =\n      animation:\n        initial: \"opacity 0\" # Slide initial animation state\n        out: \"opacity 0\" # Slide default out animation\n        easing: \"easeOutQuad\" # Default animation easing\n        duration: 500 # Default animation duration\n\n      duration: 4000 # Slide duration (display time) in milliseconds\n\n      overlap: 1 # Overlap previous out and current in animations (value >= 0)\n                 # where 0 means overlap and 1 means wait for transition to finish\n\n      layout: \"default\" # Slidea layout\n\n      layerIndex: 99 # Starting z-index for layers\n\n      autoplay: false # Autoplay feature\n      loop: true # Start from first slide after reaching last\n\n      preload: 'fast' # Preload mode: 'fast' or 'all'\n\n      animate: 'TweenLite'\n\n      # content_parallax:\n      #   enabled: true # Fade content on scroll\n      #   data:\n      #     mode: 'from-middle'\n      #     transform:\n      #       translateY: 0.6 # Scroll fade translate speed coefficient\n      #       opacity: 0.4 # Scroll fade fade speed coefficient\n      #     transform_style:\n      #       opacity: 'default' # from-middle, to-middle, default\n\n      grid:           # Split slidea background into tiles\n        rows: 1       # Number of rows to split the background into\n        columns: 1    # Number of columns to split the background into\n        stagger: 0.1  # Animation delay in between tiles\n\n      # canvas_parallax:\n      #   enabled: true # Parallax scroll coefficient\n      #   data:\n      #     transform:\n      #       translateY: 0.2\n      #   layers: true # Parallax layers as well\n\n      screen: # Refers to the current screen size\n        xs: 0\n        sm: 768\n        md: 992\n        lg: 1200\n        xlg: 1560\n\n      selector: # Element selectors\n        slide: \".slidea-slide\" # Should not be changed unless absolutely necessary\n        content: \".slidea-content\"\n        contentWrapper: \".slidea-content-wrapper\"\n        contentContainer: \".slidea-content-container\"\n        canvas: \".slidea-canvas\"\n        background: \".slidea-background\"\n        backgroundWrapper: \".slidea-background-wrapper\"\n        videoBackground: \".slidea-video-background\"\n        video: \".slidea-video\"\n        videoCover: \".slidea-video-cover\"\n        layer: \".slidea-layer\"\n        layerWrapper: \".slidea-layer-wrapper\"\n        object: \".slidea-object, .s-obj\"\n        objectWrapper: \".slidea-object-wrapper\"\n        next: \".slidea-next\"\n        prev: \".slidea-prev\"\n        inner: \".slidea-inner\"\n        wrapper: \".slidea-wrapper\"\n\n    # Debugging flag\n    @debug = true\n\n    # Set @options\n    @_defaults = _defaults\n    @settings = $.extend true, {}, _defaults, options\n\n    # Slider\n    @element = $ element\n    @parent = @element.parent()\n\n    ###\n    Current active slide. We're using -1 to say that there is no current\n    slide yet, or that the slider hasn't started yet.\n    ###\n    @current = -1\n\n    # Video Players\n    @youtube_player = {}\n    @vimeo_player = {}\n\n    # Window selector\n    @window = $(window)\n\n    # Slides loaded\n    @loaded = false\n\n    ###\n    Timer\n    Used in slide to set timeout to next slide\n    ###\n    @timer = {}\n    @timer.timeout = null\n    @timer.start = 0\n    @timer.remaining = 0\n\n    # Get or set slider ID\n    if @element.attr('id')?\n      @id = @element.attr 'id'\n    else\n      @id = @get_random_id 'rock'\n      @element.attr 'id', @id\n\n    @initialize = =>\n      @log \"Initializing Slidea..\"\n      @log @settings\n\n      # Register modules and layouts\n      @register()\n\n      # Add Slidea Classes\n      @add_classes()\n\n      # Wrap Objects\n      @wrap_objects()\n\n      # Set wrapper\n      @wrapper = $ @settings.selector.wrapper, @element\n\n      # Set inner\n      @inner = $ @settings.selector.inner, @element\n\n      # Set Slides\n      @slides = $ @settings.selector.slide, @element\n\n      # Set total slide count\n      @slides_length = @slides.length\n\n      # Initialize slides animation data\n      @data = {}\n      @slides.each (index) => @data[index] = {}\n\n      # Set the indexes of the relevant first slides\n      if @settings.first_slide?\n        @first_slide = @settings.first_slide\n      else\n        @first_slide = 0\n      @set_adjacent_slides @first_slide\n\n      # Set Active Slide\n      @active = @slides.eq @first_slide\n\n      # Set Animation Platform\n      @animate = window[@settings.animate]\n      @log \"Animating using the #{@settings.animate} platform.\"\n\n      # Initialize layouts\n      @eval.layouts 'initialize'\n\n      # Initialize modules\n      @eval.modules 'initialize'\n\n      # Animation States\n      @init_animus()\n\n      # @Settings\n      @set_data_settings()\n\n      # Set relevant object sizes\n      @set_parent_sizes()\n\n      # Get current responsive context\n      @set_responsive_context()\n\n      # Setup Layers\n      @set_layers_zindex()\n\n      # Bind Window Resize\n      @bind_resize()\n\n      # Bind Window Blur and focus\n      @bind_focus()\n\n      # Add links\n      @bind_inner_links()\n\n      # Perform Initial Load\n      @load =>\n\n        # Initial slider sizing\n        @resize()\n\n        @log \"Animation data parsed.\"\n        @log @data\n\n        # Start the slider after loader is hidden\n        setTimeout (=>\n          @slide @first_slide\n        ), 500\n\n        @log \"Load callback has finished.\"\n        return\n      return\n\n    ###\n    Slide wrapper function for calling static slider method to move\n    the carousel to the next slide\n    ###\n    @slide = (to) ->\n      from = @current\n\n      # Index Logic\n      if to == @current\n        return\n      if to > @slides_length - 1\n        to = 0\n      if to < 0\n        to = @slides_length - 1\n\n      @log \"---------------------------------------\"\n      @log \"Slide transition from #{from} to #{to}.\"\n\n      # Set adjacent next and prev slides\n      @set_adjacent_slides to\n\n      # Set Previous\n      $('.previous', @element).removeClass 'previous'\n      @slides.eq(@prev).addClass 'previous'\n\n      # Set Active\n      $('.active', @element).removeClass 'active'\n      @active = @slides.eq(to)\n      @active.addClass 'active'\n\n      # Set next\n      $('.next', @element).removeClass 'next'\n      @slides.eq(@next).addClass 'next'\n\n      # Clear Timeouts\n      if from != -1\n        setTimeout =>\n          @clear_timeouts from\n          return\n        , @data[from].background[0].animation[@data[from].background[0].duration].duration * 1000\n      @clear_timeouts to\n\n      # Call layouts slide call\n      @eval.layouts 'slide', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'slide', [from, to]\n\n      # Slidea specific slide method\n      @transition from, to\n\n      # Set Current\n      @current = to\n      @log \"Indexes are current: #{@current}, previous: #{@prev}, next: #{@next}.\"\n\n      # Go to the next slide after the slide specific duration\n      if @settings.autoplay is true\n        @timer.start = new Date\n        @timer.remaining = @data[to].background[0].duration\n        clearTimeout @timer.clock\n        @timer.clock = setTimeout((=>\n          if @settings.loop isnt true and to + 1 == @slides_length - 1\n            @log \"Looping is off. Autoplay stops here.\"\n            return\n          @slide to + 1\n          return\n        ), @timer.remaining)\n        @log \"Autoplay timer has been reset.\"\n\n      # Trigger transition event\n      @element.trigger 'slidea.transition', [\n        from\n        to\n        @prev\n        @next\n        @slides_length\n        @active\n      ]\n      return\n\n    ###\n    Set the index of the next and previous slides\n    ###\n    @set_adjacent_slides = (to) =>\n      @next = if to + 1 > @slides_length - 1 then 0 else to + 1\n      @prev = if to - 1 < 0 then @slides_length - 1 else to - 1\n      return\n\n    ###\n    Apply animations for all slider elements. Run previous slide out animation\n    and set time required to crossfade slides\n\n    @param i [Fixnum] Current slide index\n    @param prev [Fixnum] Previous slide index\n    ###\n    @transition = (from, to) =>\n      # Call layouts transition call\n      @eval.layouts 'transition', [from, to]\n\n      # Call modules transition call\n      @eval.modules 'transition', [from, to]\n\n      # Staggering timeout when using grid layouts\n      from_stagger = 0\n\n      # Transition timeout, used for overlapping transitions\n      timeout = 0\n\n      # Clear main animation timeout to prevent bad behaviour for unusual\n      # request counts (click spamming)\n      clearTimeout @animate_timeout\n\n      # Run animateOut animation for previous slide\n      if from != -1\n        @transition_run from, 'out'\n\n        from_slide_duration = @data[from].background[0].duration\n        if @data[from].background[0].animation[from_slide_duration]\n          timeout += @data[from].background[0].animation[from_slide_duration].duration * 1000\n\n      # If we want the slides to play one after another, the overlap parameter\n      # should be 1, otherwise 0. Everything in between will cause partial\n      # overlapping\n      timeout *= @settings.overlap\n      timeout = 0 if timeout < 0 # For non autoplay sliders\n\n      # Runs active slide animation timeline for background, layers and objects\n      #\n      # Set a timeout to overlap, depending on slider settings\n      @animate_timeout = setTimeout =>\n        @transition_run to, 'in'\n        return\n      , timeout\n\n      # Call layouts slide call\n      @eval.layouts 'after_transition', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'after_transition', [from, to]\n\n      return\n\n    ###\n    Run initial transition animations for the slide\n    ###\n    @transition_run = (index, mode) =>\n      # Set current slide variables\n      slide = @slides.eq(index)\n      canvas = $ @settings.selector.canvas, slide\n      layers = $ @settings.selector.layerWrapper, slide\n      objects = $ @settings.selector.object, slide\n\n      # Background animations\n      if @settings.layoutSettings.animate_background isnt false\n        @log \"Running animations for background.\"\n\n        @transition_animate index, slide, 'background', 0, mode, false\n\n      # Layer animations\n      layers.each (layer_index, layer) =>\n        @log \"Running animations for layer #{layer_index}.\"\n\n        @transition_animate index, $(layer), 'layer', layer_index, mode, false\n        return\n\n      # Object animation\n      objects.each (object_index, object) =>\n        @log \"Running animations for object #{object_index}.\"\n\n        @transition_animate index, $(object), 'object', object_index, mode, false\n        return\n      return\n\n\n    ###\n    Validate transition index for given animation element\n    ###\n    @transition_validate = (i, index, element, context, context_index, mode) =>\n      slide_duration = @data[i].background[0].duration\n      index = parseInt index\n\n      switch mode\n        when 'in'\n          return index != 'initial' &&                                                    # Not initial state\n            index != -1 &&                                                                # Not -1 state\n            !isNaN(index) &&                                                              # Not NaN\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state) &&  # Not empty object\n            (slide_duration == -1 or slide_duration != -1 and index < slide_duration)     # Not > slide_duration\n        when 'out'\n          return index != 'initial' &&                                                    # Not initial state\n            (index == -1 or slide_duration != -1 and index >= slide_duration) &&        # Is -1 state or > slide_duration\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state)     # Not empty object\n        else\n          return true\n\n    ###\n    Runs animation for current slide, generalized for background, layers and\n    objects\n\n    @param i [Fixnum] Slide index\n    @param $element [Object] Element on which animation is applied\n    @param context [String] Current animation cache accessor\n    @param context_index [Fixnum] Current animation cache accessor index\n    ###\n    @transition_animate = (i, element, context, context_index, mode, in_loop, callback) =>\n      # Set initial animation position for active slide\n      slide_duration = @data[i].background[0].duration\n\n      # Set initial state for element\n      unless mode == 'out' || in_loop || !@data[i][context][context_index].animation.initial?\n        @animate.set element, @data[i][context][context_index].animation.initial.state\n\n        if 'callback' of @data[i][context][context_index]\n          @data[i][context][context_index].callback.call @, element, 'initial'\n\n\n      # Run each background animation as long as the animation index isn't greater\n      # than the slide's preview duration\n      $.each @data[i][context][context_index].animation, (index, animation) =>\n        if !@transition_validate(i, index, element, context, context_index, mode)\n          return\n\n        @log \"Running #{mode} transition[#{index}] for #{context}[#{context_index}].\"\n        @log @data[i][context][context_index].animation[index]\n\n        # Set animation timeout\n        if mode == 'in'\n          timeout = index\n        else\n          timeout = slide_duration - parseInt(index)\n\n        # Set in loop timeout and stop if it's negative. Negative values mean\n        # that the animation is outside the loop\n        if in_loop\n          timeout = timeout - @data[i][context][context_index].loop_diff\n          return if timeout < 0\n\n        # Set timeout for each animation, with it's state\n        @data[i][context][context_index].animation[index].timeline = setTimeout =>\n          if 'callback' of @data[i][context][context_index]\n            @data[i][context][context_index].callback.call @, element, index\n\n          if typeof @data[i][context][context_index].animation[index].state == 'string'\n            @animate_preset element, @data[i][context][context_index].animation[index]\n          else\n            @animate.to element,\n              @data[i][context][context_index].animation[index].duration,\n              @data[i][context][context_index].animation[index].state\n          return\n        , timeout\n        return\n\n      # If we have a loop, calculate timeout to the next animation iteration and\n      # restart animation with loop parameters\n      if @data[i][context][context_index].loop\n        if in_loop\n          loop_timeout = @data[i][context][context_index].loop - @data[i][context][context_index].loop_diff\n        else\n          loop_timeout = @data[i][context][context_index].loop\n\n        @data[i][context][context_index].loop_timeout = setTimeout =>\n          @transition_animate i, element, context, context_index, mode, true\n          return\n        , loop_timeout\n\n      return\n\n    ###\n    Grid animation wrapper to run a callback after grid animation ends\n    ###\n    @run_grid_transition = (to, $element, context, context_index, in_loop)  =>\n      to_slide = @slides.eq(to)\n      @run_transition i, $element, context, context_index, in_loop, =>\n        $.Velocity.hook $('.slidea-background-main', to_slide), 'opacity', 1\n        $('.slidea-grid', to_slide).velocity opacity: 0, 20\n        return\n      return\n\n\n    ###\n    Run animus animation preset\n    ###\n    @animate_preset = (element, data) =>\n      @log \"Animating preset #{data}.\"\n      timeout = 0\n      $.each $.animus.presets[data.state], (index, animation) =>\n        duration = data.duration * animation[1]\n        setTimeout =>\n          @animate.to element,\n            duration,\n            $.animus.presets[data.state][index][0]\n          return\n        , timeout * 1000\n        timeout += duration\n        return\n      return\n\n    ###\n    Registers modules and layouts which are loaded\n    ###\n    @register = =>\n      # Create instances of registered layouts\n      @layouts = {}\n      $.each $.slidea.layouts, (index, value) =>\n        @layouts[index] = new value\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @layouts[index].settings?\n          if @settings.layoutSettings?\n            @settings.layoutSettings = $.extend true, {}, @layouts[index].settings, @settings.layoutSettings\n          else\n            @settings.layoutSettings = @layouts[index].settings\n\n        @log \"Layout \\\"#{index}\\\" registered.\"\n        return\n\n      # Register modules\n      @modules = {}\n      $.each $.slidea.modules, (index, module) =>\n        # Create module instance\n        @modules[index] = new module\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @modules[index].settings?\n          if @settings[index]?\n            if typeof(@modules[index].settings) is 'object'\n              @settings[index] = $.extend true, {}, @modules[index].settings, @settings[index]\n          else\n            @settings[index] = @modules[index].settings\n\n        @log \"Module \\\"#{index}\\\" registered.\"\n        @log @modules[index]\n        return\n\n      @log \"Settings changed after module registration.\"\n      @log @settings\n      return\n\n    ###\n    Method call wrapper for layout and modules\n    ###\n    @eval = {}\n\n    ###\n    Setup wrapper function for calling layout method\n    ###\n    @eval.layouts = (method, args) =>\n      args = [] unless args?\n\n      # Call layout method if it exists\n      if @layouts[@settings.layout]\n        if @layouts[@settings.layout][method]?\n          @layouts[@settings.layout][method].apply this, args\n      else\n        @error \"Couldn't find any valid layouts with the name \\\"#{@settings.layout}\\\".\"\n      return\n\n    ###\n    Setup wrapper function for calling modules method\n    ###\n    @eval.modules = (method, args) =>\n      args = [] unless args?\n\n      # Call module method if it exists\n      $.each @modules, (name, module) =>\n        if @settings[name]? and\n           (@settings[name].enabled == true or @settings[name] == true) and\n           @modules[name][method]?\n          @modules[name][method].apply this, args\n      return\n\n    ###\n    Get data such as height, width and animations for the slide with\n    the current index\n    ###\n    @get_slide_data = (index) =>\n      @data[index].background = {}\n      @data[index].layer = {}\n      @data[index].object = {}\n\n      slide = @slides.eq(index)\n      slide_background = $(@settings.selector.background, slide)\n      slide_layers = $(@settings.selector.layer, slide)\n      slide_objects = $(@settings.selector.object, slide)\n\n      # Get background data\n      slide_background.each (background_index, background) =>\n        background = $(background)\n        @data[index].background[background_index] = @get_data(\n          index, 'background', background_index, slide, @check_image(background), @settings.duration\n        )\n\n        @log \"Received data for slide #{index} -> background #{background_index}.\"\n        @log @data[index].background[background_index]\n        return\n\n      if slide_background.length == 0\n        @data[index].background[0] = @get_data(\n          index, 'background', 0, slide, null, @settings.duration\n        )\n\n      # Layer animation values based on the background transitions\n      default_duration = @data[index].background[0].duration\n      # @deprecated 2.1\n      # default_duration = @data[index].background[0].duration - (@data[index].background[0].animation[0].duration / 2)\n      # @deprecated 2.0\n      # default_start = @data[index].background[0].animation[@data[index].background[0].start].duration\n\n      # Cache layers by determining whether they are images or object layers\n      slide_layers.each (layer_index, layer) =>\n        layer = $(layer)\n        @data[index].layer[layer_index] = @get_data(\n          index, 'layer',layer_index, layer, @check_image(layer), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> layer #{layer_index}.\"\n        @log @data[index].layer[layer_index]\n        return\n\n      # Cache objects by determining whether they are images or object layers\n      slide_objects.each (object_index, object) =>\n        object = $(object)\n        @data[index].object[object_index] = @get_data(\n          index, 'object', object_index, object, @check_image(object), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> object #{object_index}.\"\n        @log @data[index].object[object_index]\n        return\n\n      # Get module specific data\n      @eval.modules 'get_slide_data', [\n        index\n        slide\n        slide_background\n        slide_layers\n        slide_objects\n      ]\n\n      @log \"Finished gathering data for all elements.\"\n      return\n\n    ###\n    Get element animation data based on its type\n\n    @param object [Object] Current data gathering target\n    @param image [Object] Image target from which we gather layer sizes\n    @param type [String] Target type identifier\n    @param duration [Fixnum] Element default on screen display time\n    ###\n    @get_data = (index, context, context_index, object, image, default_duration) ->\n      # String data to parse\n      string = ''\n\n      # JS Data to use for the object\n      js_data = false\n\n      # Get JS Settings object\n      slide_id = @slides.eq(index).attr 'id'\n      slide_classes = @slides.eq(index).attr 'class'\n\n\n      if @settings.slide?\n        slide_js_data = []\n\n        # Get slide data by index\n        if @settings.slide[index]?\n          slide_js_data.push @settings.slide[index]\n\n        # Get slide data by class\n        if slide_classes?\n          $.each slide_classes.split(' '), (index, slide_class) =>\n            if @settings.slide['.' + slide_class]?\n              slide_js_data.push @settings.slide['.' + slide_class]\n            return\n\n        # Get slide data by id\n        if slide_id? and @settings.slide['#' + slide_id]?\n          slide_js_data.push @settings.slide['#' + slide_id]\n\n        # Get JS data for current object\n        if slide_js_data.length > 0\n          object_id = object.attr 'id'\n          object_classes = object.attr 'class'\n\n          # Gather\n          identifiers = []\n          identifiers.push context_index\n          if object_classes?\n            identifiers = identifiers.concat object_classes.split(' ').map (element) -> '.' + element\n          if object_id?\n            identifiers.push '#' + object_id\n\n          $.each slide_js_data, (index, slide_js_data) =>\n            if slide_js_data[context]?\n              $.each identifiers, (index, identifier) =>\n                if slide_js_data[context]? and slide_js_data[context][identifier]?\n                  if js_data\n                    js_data = $.extend js_data, slide_js_data[context][identifier]\n                  else\n                    js_data = $.extend {}, slide_js_data[context][identifier]\n                return\n            return\n\n      # Handler stacks for animation timing\n      time_stack = []\n      current_time_stack = 0\n      animation_stack = {}\n\n      # Set Element\n      data = {}\n      data.type = context\n      data.animation = {}\n\n      # Get the sizes of the loaded image element\n      if image != null\n        image_size = @get_image_size image\n\n        data.width = image_size.width\n        data.height = image_size.height\n\n      # Get data for the layer position and size\n      if context is 'layer'\n        data.position = {}\n\n        if object.attr('data-slidea-width')?\n          data.width = parseFloat(object.attr('data-slidea-width'))\n        else if js_data and js_data.width?\n          data.width = parseFloat @delete_property js_data, 'width'\n\n        if object.attr('data-slidea-height')?\n          data.height = parseFloat(object.attr('data-slidea-height'))\n        else if js_data and js_data.height?\n          data.height = parseFloat @delete_property js_data, 'height'\n\n        # Get top or bottom offset\n        if object.attr('data-slidea-top')?\n          data.position.top = parseFloat(object.attr('data-slidea-top'))\n        else if js_data and js_data.top?\n          data.position.top = parseFloat @delete_property js_data, 'top'\n        else if object.attr('data-slidea-bottom')?\n          data.position.bottom = parseFloat(object.attr('data-slidea-bottom'))\n        else if js_data and js_data.bottom?\n          data.position.bottom = parseFloat @delete_property js_data, 'bottom'\n        else\n          data.position.top = 0\n\n        # Get left or right offset\n        if object.attr('data-slidea-left')?\n          data.position.left = parseFloat(object.attr('data-slidea-left'))\n        else if js_data and js_data.left?\n          data.position.left = parseFloat @delete_property js_data, 'left'\n        else if object.attr('data-slidea-right')?\n          data.position.right = parseFloat(object.attr('data-slidea-right'))\n        else if js_data and js_data.right?\n          data.position.right = parseFloat @delete_property js_data, 'right'\n        else\n          data.position.left = 0\n\n      # Starting time for layer animation\n      if object.attr('data-slidea-start')?\n        data.start = parseFloat(object.attr('data-slidea-start'), 10)\n      else if js_data and js_data.start?\n        data.start =  parseInt @delete_property js_data, 'start'\n      else\n        data.start =  0\n\n      # Get Initial State\n      initial_state = object.attr('data-slidea')\n      initial_state = object.attr('data-slidea-initial') unless initial_state?\n      initial_state = @delete_property js_data, 'initial' unless initial_state?\n\n      if initial_state?\n        starting_animation = initial_state\n      else if context == 'background'\n        starting_animation = @settings.animation.initial\n      else\n        starting_animation = ''\n\n      ###\n      This sets the initial state of our animated object\n      The entering animation will be set as css and will\n      transition to the default state\n      ###\n      animation_stack[data.start] = starting_animation\n      time_stack[current_time_stack++] = data.start\n\n\n      ###\n      Set animation in override to set a different beginning state\n      other than the default one\n      ###\n      if object.attr('data-slidea-in')?\n        initial_animation_override = @animus.get object.attr('data-slidea-in')\n      else if js_data and js_data.in?\n        initial_animation_override = @animus.get @delete_property(js_data, 'in')\n      else\n        initial_animation_override = false\n\n      # Get Animation Timeline\n      timeline = object.data()\n      $.each timeline, (key, value) ->\n        time = undefined\n        # Check if data key matches animation\n        if (time = key.match(/slideaAt([0-9]+)/)) != null\n          at_time = parseInt(time[1], 10)\n\n          # Set value animation at time\n          animation_stack[at_time] = value\n\n          # Add time to time stack\n          time_stack[current_time_stack++] = at_time\n        return\n\n\n      # Get animation data from JS\n      $.each js_data, (index, value) =>\n        return unless /[0-9]+/.test index\n\n        animation_stack[index] = value\n        time_stack[current_time_stack++] = index\n        return\n\n      # Set ending time as default duration or when last animation ends\n      last_time = 0\n\n      ###\n      The time stack is needed to maintain the order of\n      the object animations since JSON objects aren't ordered\n      ###\n      time_stack.sort()\n      $.each time_stack, (key, time) =>\n        data.animation[time_stack[key]] = @animus.get animation_stack[time_stack[key]]\n        if time > last_time\n          last_time = time\n        return\n\n      ###\n      For backgrounds, we allow splitting images into tiles using set rows and\n      columns.\n      ###\n      if context is 'background'\n        data.grid = @get_grid_data(object)\n\n      # Get display time\n      duration = object.attr('data-slidea-duration')\n      if !duration? and js_data and js_data.duration?\n        duration = @delete_property js_data, 'duration'\n\n      if @settings.autoplay is false\n        data.duration = -1\n      else if duration?\n        data.duration = parseFloat(duration, 10)\n      else\n        data.duration = parseFloat(default_duration, 10)\n\n      # Get Exit Animation\n      if object.attr('data-slidea-out')?\n        out_animation = object.attr('data-slidea-out')\n      else if js_data and js_data.out?\n        out_animation = @delete_property js_data, 'out'\n      else if context == 'background'\n        out_animation = @settings.animation.out\n      else\n        out_animation = ''\n\n      # Set ending animation unless we have a null string\n      if out_animation != ''\n        if context == 'background'\n          if data.duration == -1 or data.duration > last_time + data.animation[last_time].duration\n            end_time = data.duration\n          else\n            end_time = last_time + data.animation[last_time].duration\n        else\n          end_time = data.duration\n\n        data.animation[end_time] = @animus.get out_animation\n\n      ###\n      Set reset state by getting all the animation variables\n      and setting them to the default values\n      ###\n      if $.type(data.animation[data.start].state) isnt 'string'\n        # Get animation with resets, meaning besides initial values, we pass through all other\n        # data animations and set default values for them as well\n        data.animation.initial =\n          timeline: null\n          duration: 0\n          state: @animus.reset data.animation[data.start].state, data.animation\n\n        # Set initial opacity to 1\n        unless 'opacity' of data.animation.initial.state\n          data.animation.initial.state.opacity = 1\n\n        # Set initial animation as a forcefed animation, meaning we use the\n        # initial state as final state, and we override the default state,\n        # if applicable\n        data.animation[data.start].state = @animus.reset initial_animation_override.state, data.animation\n\n        # Add initial state's easing to the first animation state\n        if 'ease' of data.animation.initial.state\n          data.animation[data.start].state.ease = data.animation.initial.state.ease\n\n      # Set looping timeout\n      if object.attr('data-slidea-loop')?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n      else if js_data and js_data.loop?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n        @delete_property js_data, 'loop'\n      else\n        data.loop = false\n\n      # Set animation callback\n      if js_data and js_data.callback?\n        data.callback = js_data.callback\n\n      # Get module specific data\n      @eval.modules 'get_data', [\n        data,\n        index,\n        context,\n        context_index,\n        object,\n        image,\n        default_duration,\n      ]\n\n      return data\n\n    ###\n    Get grid data for the given background object\n    ###\n    @get_grid_data = (object) =>\n      grid = {}\n\n      rows = object.attr('data-slidea-grid-rows')\n      grid.rows = if rows?\n        parseInt rows, 10\n      else\n        @settings.grid.rows\n\n      columns = object.attr('data-slidea-grid-columns')\n      grid.columns = if columns?\n        parseInt columns, 10\n      else\n        @settings.grid.columns\n\n      stagger = object.attr('data-slidea-grid-stagger')\n      grid.stagger = if stagger?\n        parseInt stagger, 10\n      else\n        @settings.grid.stagger\n\n\n      if grid.columns > 1 or grid.rows > 1\n        grid.enabled = true\n        object.addClass 'slidea-grid-slide'\n\n      return grid\n\n\n    ###\n    Get the size of an image element\n    ###\n    @get_image_size = (image) =>\n      size = {}\n\n      # Get image width\n      size.width = if image[0].naturalWidth?\n                    image[0].naturalWidth\n                   else if image[0].width?\n                    image[0].width\n                   else if image.width?\n                    image.width()\n                   else\n                    'auto'\n\n      # Get image height\n      size.height = if image[0].naturalHeight?\n                      image[0].naturalHeight\n                    else if image[0].height?\n                      image[0].height\n                    else if image.height?\n                      image.height()\n                    else\n                      'auto'\n\n      return size\n\n    ###\n    Verify if the first required slides have been loaded\n    ###\n    @check_loaded = (callback) =>\n      initial = @loaded\n\n      if @settings.preload == 'fast'\n        dynamic = 'load_first'\n\n        @loaded = (\n          @slides_loaded.indexOf(@prev) != -1 and\n          @slides_loaded.indexOf(@first_slide) != -1 and\n          @slides_loaded.indexOf(@next) != -1\n        )\n\n        # All slides have been loaded\n        if @slides_loaded.length == @slides_length\n          # Enable modules\n          @eval.layouts 'load'\n\n          # Enable layouts\n          @eval.modules 'load'\n\n      else\n        dynamic = 'load'\n\n        @loaded = (@slides_loaded.length == @slides_length)\n\n      # Initial load callback, useful for the fast mode because we don't want to\n      # call the callback multiple times\n      if !initial and @loaded\n        @log \"Required number of slides has been loaded.\"\n\n        # Enable layouts\n        @eval.layouts dynamic\n\n        # Enable modules\n        @eval.modules dynamic\n\n        # Trigger Load event\n        @element.trigger 'slidea.load'\n\n        # Apply callback\n        callback.call()\n\n      return\n\n    ###\n    Load function to imagesLoaded images and cache slide animations\n    ###\n    @load = (callback) ->\n      @slides_loaded = []\n\n      # Preload images from all the slides\n      @slides.each (index, slide) =>\n        slide = $(slide)\n        slide_images = $('img', slide)\n\n        if slide_images.length == 0\n          @log \"No images to load for slide #{index}.\"\n          @get_slide_data index\n\n          # Add slide to loaded slides\n          @slides_loaded.push index\n          @check_loaded callback\n          return\n\n        # Preload images from current slide\n        images_loaded = 0\n        slide_images.each (image_index, image) =>\n          if $(image).attr('data-slidea-src')?\n            src = $(image).attr('data-slidea-src')\n          else\n            src = $(image).attr('src')\n\n          image_loader = $(\"<img>\")\n          image_loader.attr 'src', src\n\n          # Set image sizes on load\n          image_loader.load =>\n            # Set actual src attribute to the loaded images\n            $(image).attr 'src', src\n\n            # When all images are loaded, gather slide data for current slide\n            images_loaded += 1\n            if images_loaded == slide_images.length\n              @log \"Loaded images for slide #{index}.\"\n              @get_slide_data index\n\n              # After gathering data, set the size for the current slide\n              @eval.layouts 'resize_slide', [index]\n\n              # Add slide to loaded slides\n              @slides_loaded.push index\n\n              # Call callback if slides are loaded\n              @check_loaded callback\n            return\n          return\n        return\n\n\n    ###\n    Checks if given element is an image and returns it,\n    otherwise it returns null\n    ###\n    @check_image = (element) =>\n      if element.is 'img'\n        return element\n      else\n        return null\n\n    ###\n    Resize the slider by setting sizes in current context\n    ###\n    @resize = =>\n      # Initialize modules\n      @eval.modules 'before_resize'\n\n      @set_responsive_context()\n      @set_parent_sizes()\n\n      # Initialize layouts\n      @eval.layouts 'resize'\n\n      # Initialize modules\n      @eval.modules 'resize'\n\n      @log \"Slider elements have been resized.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_resize = =>\n      @window.resize =>\n        @resize()\n\n        @element.trigger 'slidea.resize', [\n          @window_width\n          @window_height\n          @current_responsive_size\n        ]\n\n        return\n\n      @log \"Bound window resize event.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_focus = =>\n      return unless @settings.autoplay and @settings.pauseOnBlur\n\n      @window.focus =>\n        @unpause_timer()\n        return\n\n      @window.blur =>\n        @pause_timer()\n        return\n      return\n\n    ###\n    Bind inner button links\n    ###\n    @bind_inner_links = =>\n      $('[data-slidea-href]', @element).each (index, element) =>\n        element = $(element)\n        href = element.attr 'data-slidea-href'\n\n        if /^[0-9]+/.test href\n          href = parseInt href\n        else if /^\\#[a-zA-Z\\_][a-zA-Z0-9\\_\\-]*/.test href\n          return unless $(href).hasClass 'slidea-slide'\n          href = $(href).index()\n\n        element.on 'click', =>\n          @slide href\n          return\n        return\n      return\n\n    ###\n    Set the z-index of each of the @layers\n    ###\n    @set_layers_zindex = =>\n      @log \"Setting layer z-index starting from #{@settings.layerIndex}.\"\n\n      @slides.each (si, slide) =>\n        layers = $(\".slidea-layer-wrapper\", $(slide))\n        layer_count = layers.length\n        layers.each (li, layer) =>\n          $(layer).css \"z-index\", @settings.layerIndex + layer_count - li\n          return\n        return\n      return\n\n    ###\n    Set current responsive range parameter as xs,sm,md or lg\n    ###\n    @set_responsive_context = =>\n      if @window_width >= @settings.screen.xlg\n        @current_responsive_size = 'xlg'\n      else if @window_width >= @settings.screen.lg\n        @current_responsive_size = 'lg'\n      else if @window_width >= @settings.screen.md\n        @current_responsive_size = 'md'\n      else if @window_width >= @settings.screen.sm\n        @current_responsive_size = 'sm'\n      else\n        @current_responsive_size = 'xs'\n\n      @log \"Responsive context is \\\"#{ @current_responsive_size }\\\".\"\n\n      return\n\n    ###\n    Sets the size of the slide relevant parents\n    ###\n    @set_parent_sizes = =>\n      # Set Size Setup\n      @window_width = @window.width()\n      @window_height = @window.height()\n\n      # @Parent Size\n      @parent_width = @parent.width()\n      @parent_height = @parent.height()\n\n      # @Wrapper Size\n      @wrapper_width = @wrapper.width()\n      @wrapper_height = @wrapper.height()\n\n      @log \"Parent size is #{@parent_width} x #{@parent_height}\"\n      @log \"Window size is #{@window_width} x #{@window_height}\"\n      @log \"Wrapper size is #{@wrapper_width} x #{@wrapper_height}\"\n\n      return\n\n    ###\n    Add the actual classes to the Slidea selector classes\n    ###\n    @add_classes = =>\n      # $(@settings.selector.slide, @element).addClass \"slidea-slide\"\n      # $(@settings.selector.content, @element).addClass \"slidea-content\"\n      # $(@settings.selector.background, @element).addClass \"slidea-background\"\n      # $(@settings.selector.videoBackground, @element).addClass \"slidea-video-background\"\n      # $(@settings.selector.video, @element).addClass \"slidea-video\"\n      # $(@settings.selector.videoCover, @element).addClass \"slidea-video-cover\"\n      # $(@settings.selector.layer, @element).addClass \"slidea-layer\"\n      # $(@settings.selector.object, @element).addClass \"slidea-object\"\n      # $(@settings.selector.next, @element).addClass \"slidea-next\"\n      # $(@settings.selector.prev, @element).addClass \"slidea-prev\"\n      # $(@settings.selector.pagination, @element).addClass \"slidea-pagination\"\n\n      @log \"Added additional classes.\"\n      return\n\n    ###\n    Wrap all the elements into slidea specific classes\n    ###\n    @wrap_objects = =>\n      # Wrap background and layers with .slidea-canvas\n      $(@settings.selector.slide, @element).each (i, slide) =>\n        $(@settings.selector.background + ', ' + @settings.selector.layer, $(slide)).wrapAll \"<div class=\\\"#{ @settings.selector.canvas.substring(1) }\\\"></div>\"\n\n      # Wrap all slides with .slidea-outer > .slidea-inner\n      .wrapAll \"<div class=\\\"#{ @settings.selector.wrapper.substring(1) }\\\"><div class=\\\"#{ @settings.selector.inner.substring(1) }\\\"></div></div>\"\n\n      # Wrap content with .slidea-content-wrapper\n      $(@settings.selector.content, @element).wrap \"<div class=\\\"#{ @settings.selector.contentWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap background with .slidea-background-wrapper\n      $(@settings.selector.background, @element).wrap \"<div class=\\\"#{ @settings.selector.backgroundWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap layers with .slidea-layer-wrapper\n      $(@settings.selector.layer, @element).wrap \"<div class=\\\"#{ @settings.selector.layerWrapper.substring(1) }\\\"></div>\"\n\n      # Call modules and layout method\n      @eval.layouts 'wrap_objects'\n      @eval.modules 'wrap_objects'\n      return\n\n\n    ###\n    Check if element has data-slidea-settings which override default init settings\n    ###\n    @set_data_settings = =>\n      if @element.attr(\"data-slidea-in\")?\n        @settings.animation.in = @element.attr(\"data-slidea-in\")\n      if @element.attr(\"data-slidea-out\")?\n        @settings.animation.out = @element.attr(\"data-slidea-out\")\n      if @element.attr(\"data-slidea-duration\")?\n        @settings.duration = @element.attr(\"data-slidea-duration\")\n      if @element.attr(\"data-slidea-layout\")?\n        @settings.layout = @element.attr(\"data-slidea-layout\")\n\n      @log \"Gathered slider data settings.\"\n\n      return\n\n    ###\n    Set default animation parameters for Slidea animation objects\n    and create animus model\n    ###\n    @init_animus = =>\n      override =\n        duration: @settings.animation.duration\n        easing: @settings.animation.easing\n\n      # Animus\n      @animus = new $.animus(override)\n\n      @log \"Initialized animus parser.\"\n      return\n\n    ###\n    Clears all the set timeouts for the chosen slide in order to stop all\n    programmed animations.\n\n    @version 2.0 Loop timeouts must also be cleared after every slide\n    ###\n    @clear_timeouts = (i) =>\n      if 'background' of @data[i]\n        $.each @data[i].background, (index) =>\n          $.each @data[i].background[index].animation, (animate_index) =>\n            clearTimeout @data[i].background[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].background[index]\n            clearTimeout @data[i].background[index].loop_timeout\n\n      if 'layer' of @data[i]\n        $.each @data[i].layer, (index) =>\n          $.each @data[i].layer[index].animation, (animate_index) =>\n            clearTimeout @data[i].layer[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].layer[index]\n            clearTimeout @data[i].layer[index].loop_timeout\n          return\n\n      if 'object' of @data[i]\n        $.each @data[i].object, (index) =>\n          $.each @data[i].object[index].animation, (animate_index) =>\n            clearTimeout @data[i].object[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].object[index]\n            clearTimeout @data[i].object[index].loop_timeout\n          return\n\n      @log \"Cleared timeouts for slide #{i}.\"\n      return\n\n\n    ###\n    Pause autoplay when mouse is over @element\n    ###\n    @pause_timer = =>\n      current_time = new Date\n      @timer.remaining = @timer.remaining - (current_time - (@timer.start))\n      clearTimeout @timer.clock\n\n      @eval.modules 'pause'\n\n      @element.trigger 'slidea.pause'\n      return\n\n    ###\n    Unpause timer when hovering over @element\n    ###\n    @unpause_timer = =>\n      next_slide = if @current == -1 then 1 else @current + 1\n      clearTimeout @timer.clock\n\n      @timer.start = new Date\n      @timer.clock = setTimeout((=>\n        @slide next_slide\n        return\n      ), @timer.remaining)\n\n      @eval.modules 'resume'\n\n      @element.trigger 'slidea.resume'\n\n      return\n\n\n    ###\n    Helper method\n    ###\n    @next = =>\n      @slide @current + 1\n      return\n\n    ###\n    Helper method\n    ###\n    @prev = =>\n      @slide @current - 1\n      return\n\n    ###\n    Debounce helper to make resize happen every n milliseconds\n    ###\n    @debounce = (func, wait, immediate) ->\n      timeout = undefined\n      ->\n        context = this\n        args = arguments\n\n        later = ->\n          timeout = null\n          if !immediate\n            func.apply context, args\n          return\n\n        callNow = immediate and !timeout\n        clearTimeout timeout\n        timeout = setTimeout(later, wait)\n        if callNow\n          func.apply context, args\n        return\n\n    ###\n    Delete an object property and return its value\n    ###\n    @delete_property = (object, property) ->\n      temporary = object[property]\n      delete object[property]\n      return temporary\n\n    ###\n    Get a random id by concatenating input string\n    with a random number\n    ###\n    @get_random_id = (string) ->\n      return string + '-' + Math.floor((Math.random() * 1000) + 1)\n\n    ###\n    Extend given default settings with user input\n    ###\n    @extend_settings = (id, defaults) =>\n      if @settings[id]?\n        @settings[id] = $.extend {}, defaults, @settings[id]\n      else\n        @settings[id] = defaults\n\n    ###\n    Logger snippet within Slidea\n    ###\n    @log = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.log \"[Slidea]\", item\n      else\n        console.log \"[Slidea] #{item}\"\n      return\n\n    ###\n    Error logger snippet within Slidea\n    ###\n    @error = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.error \"[Slidea]\", item\n      else\n        console.error \"[Slidea] #{item}\"\n      return\n\n    @initialize()\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.modules = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_module = (name, module) ->\n    $.slidea.modules[name] = module\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.layouts = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_layout = (name, layout) ->\n    $.slidea.layouts[name] = layout\n    return\n\n  ###\n  Lightweight plugin wrapper that prevents multiple instantiations.\n  ###\n  $.fn.slidea = (opts) ->\n    @each (index, element) ->\n      unless $.data element, \"slidea\"\n        $.data element, \"slidea\", new $.slidea element, opts\n\n) window.jQuery, window, document\n\n#\n# Default Slidea modules\n#\n\n#=include modules/content-scaling.coffee\n#=include modules/controls.coffee\n#=include modules/keyboard.coffee\n#=include modules/loader.coffee\n#=include modules/mousewheel.coffee\n#=include modules/pagination.coffee\n#=include modules/pause-on-hover.coffee\n#=include modules/prevent-dragging.coffee\n#=include modules/progress-bar.coffee\n#=include modules/retina.coffee\n#=include modules/scroller.coffee\n#=include modules/thumbnails.coffee\n#=include modules/touch.coffee\n#=include modules/video.coffee\n#=include modules/video-cover.coffee\n\n# A factory that uses AMD, CommonJS or window globals to\n# create the jQuery plugin.\n# do (plugin = slidea, window) ->\n#   hasDefine  = typeof define is \"function\" and define.amd?\n#   hasExports = typeof module isnt \"undefined\" and module.exports?\n#\n#   # AMD.\n#   if hasDefine\n#     define [\"jquery\"], plugin\n#\n#   # NodeJS/CommonJS.\n#   else if hasExports\n#     module.exports = plugin require \"jquery\"\n#\n#   # Window globals.\n#   else\n#     plugin window.jQuery or window.$\n"]}