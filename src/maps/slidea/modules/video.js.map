{"version":3,"sources":["slidea/modules/video.coffee"],"names":[],"mappings":"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","file":"slidea/modules/video.js","sourceRoot":"/source/","sourcesContent":["(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.video = ->\n    ###\n    Enable or disable video features\n    ###\n    @settings = true\n\n    ###\n    Setup video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @initialize = ->\n      ###\n      Handle autoplay timeouts using a timeout timeline\n      ###\n      @video_timeline = {}\n\n      delay = 500\n      interval = undefined\n      i = 0\n      tries = 10\n\n      # Handle background videos\n      $('.slidea-video-background').each (index, background) ->\n        unless $(background).hasClass 'slidea-object'\n          $(background).addClass 'slidea-object'\n        return\n\n      $(\"video.slidea-video\", @element).attr \"data-slidea-video-type\", \"html5\"\n      $(\"iframe[data-slidea-src*=\\\"youtube.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"youtube\"\n      $(\"iframe[data-slidea-src*=\\\"vimeo.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"vimeo\"\n\n      $(@settings.selector.video, @element).each (i, el) =>\n        # Get video\n        video = $(el)\n\n        # Get volume\n        volume = video.attr(\"data-slidea-volume\")\n        volume = (if isNaN(volume) then 0 else volume)\n\n        # Get controls\n        controls = (video.attr(\"data-slidea-controls\") is \"true\")\n\n        # Pause slider on video play\n        pause_slider = (video.attr(\"data-slidea-pause-slider\") is \"true\")\n\n        # Get src\n        src = video.attr(\"data-slidea-src\")\n\n        # Get video type\n        video_type = video.attr(\"data-slidea-video-type\")\n\n        # Get video id\n        video.attr \"id\", @get_random_id(\"slidea-video\") unless video.attr(\"id\")?\n        id = video.attr(\"id\")\n\n        # HTML5\n        if video_type is \"html5\"\n          # Set volume\n          video.get(0).volume = volume\n\n          # Enable or disable controls\n          video.attr \"controls\", \"controls\"  if controls is true\n\n          # If slider is set to autoplay, pause the slider when video starts\n          if @settings.autoplay is true and pause_slider is true\n            # On video play\n            video.on \"play\", =>\n              @pause_timer()\n              return\n\n            # On video pause\n            video.on \"pause ended\", =>\n              @unpause_timer()\n              return\n\n\n        # YouTube\n        if video_type is \"youtube\"\n          video_id = undefined\n          separator = undefined\n\n          # Enable video JS API\n          if src.indexOf(\"enablejsapi=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?enablejsapi=1\"\n            else\n              video.attr \"src\", src + \"&enablejsapi=1\"\n            src = video.attr(\"src\")\n\n          # Set player API ID\n          if src.indexOf(\"playerapiid=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?playerapiid=\" + id\n            else\n              video.attr \"src\", src + \"&playerapiid=\" + id\n            src = video.attr(\"src\")\n\n          # Get youtube Video ID\n          if src.indexOf(\"embed\") == \"-1\"\n            video_id = src.split(\"v=\")[1]\n            separator = video_id.indexOf(\"&\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n          else\n            video_id = src.split(\"/\")\n            video_id = video_id[video_id.length - 1]\n            separator = video_id.indexOf(\"?\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n\n\n          # Create a new YT Player using the API\n          video.load =>\n            @youtube_player[id] = new YT.Player(id,\n              height: \"720\"\n              width: \"1280\"\n              video_id: video_id\n              events:\n                onStateChange: (e) =>\n                  @pause_timer()  if e.data is 1\n                  @unpause_timer()  if e.data is 2 or e.data is 0\n                  return\n            )\n\n            # Try to set the video volume\n            i = 0\n            interval = setInterval(=>\n              i++\n              if i is tries\n                clearInterval interval\n              else if not @youtube_player[id]? or typeof @youtube_player[id].setVolume isnt \"function\"\n                return\n              else\n                clearInterval interval\n              @youtube_player[id].setVolume volume\n              return\n            , delay)\n            return\n\n        # Vimeo\n        if video_type is \"vimeo\"\n          # Enable vimeo JS API\n          if src.indexOf(\"api=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?api=1\"\n            else\n              video.attr \"src\", src + \"&api=1\"\n            src = video.attr(\"src\")\n\n          # Setup Vimeo player ID\n          if src.indexOf(\"player_id=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?player_id=\" + id\n            else\n              video.attr \"src\", src + \"&player_id=\" + id\n            src = video.attr(\"src\")\n\n          # Create a new Vimeo Player API\n          video.load =>\n            @vimeo_player[id] = $f(id)\n            @vimeo_player[id].addEvent \"ready\", =>\n              video.attr \"data-slidea-ready\", \"true\"\n              @vimeo_player[id].api \"setVolume\", volume\n              if @settings.autoplay is true and pause_slider is true\n                @vimeo_player[id].addEvent \"play\", @pause_timer\n                @vimeo_player[id].addEvent \"pause\", @unpause_timer\n                @vimeo_player[id].addEvent \"finish\", @unpause_timer\n              return\n            return\n        return\n\n    ###\n    Handle video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @slide = (from, to) ->\n      from_slide = @slides.eq(from)\n      to_slide = @slides.eq(to)\n\n      from_videos = $(@settings.selector.video, from_slide)\n      to_videos = $(@settings.selector.video, to_slide)\n\n      # Pause or stop videos from from slide\n      if from != -1 and from_videos.length > 0\n        from_videos.each (video_index, video)=>\n          # to Video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Get video type\n          video_type = video.attr('data-slidea-video-type')\n\n          # Check if the video resets when next slide is triggered\n          reset = video.attr('data-slidea-reset') == 'true'\n\n          # Clear the video timeout for the to video\n          clearTimeout @video_timeline[id]\n\n          # HTML5\n          if video_type == 'html5'\n            # Pause the video\n            video.get(0).pause()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                video.get(0).current_time = 0\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Youtube\n          else if video_type == 'youtube'\n            # Pause the video\n            @youtube_player[id].pauseVideo()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @youtube_player[id].stopVideo()\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Vimeo\n          else if video_type == 'vimeo'\n            # Pause the video\n            @vimeo_player[id].api 'pause'\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @vimeo_player[id].api 'unload'\n                return\n              ), @data[to].background[0].animation[0].duration\n          return\n\n        @log \"Paused (handled) videos from slide #{from}.\"\n\n      if to_videos.length > 0\n        # Play videos from to slide\n        to_videos.each  (index, video) =>\n          # Get video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Set try interval data\n          i = 0\n          tries = 10\n          delay = 500\n          interval = undefined\n\n          # Check if video should autoplay\n          autoplay = video.attr('data-slidea-autoplay') == 'true'\n          if video.attr('data-slidea-autoplay-time')?\n            autoplay_time = parseInt(video.attr('data-slidea-autoplay-time'), 10)\n          else\n            autoplay_time = 100\n\n          # Check if the video pauses the slider\n          pause_slider = video.attr('data-slidea-pause-slider') == 'true'\n\n          # HTML5\n          if video.attr('data-slidea-video-type') == 'html5'\n            if autoplay == true\n              # Start the video player after the set delay\n              @video_timeline[id] = setTimeout((->\n                video.get(0).play()\n                return\n              ), autoplay_time)\n\n          # Youtube\n          if video.attr('data-slidea-video-type') == 'youtube'\n            if autoplay == true\n              # Try to get the youtube player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        !defined(@youtube_player[id]) or\n                        typeof @youtube_player[id].playVideo != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  @youtube_player[id].playVideo()\n                  return\n                , autoplay_time\n                return\n              , delay\n\n          # Vimeo\n          if video.attr('data-slidea-video-type') == 'vimeo'\n            if autoplay == true\n              # Try to get the vimeo player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        typeof @vimeo_player[id].api != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  Froogaloop(id).api 'play'\n                  return\n                , autoplay_time\n                return\n              , delay\n          return\n\n        @log \"Played (handled) videos from slide #{to}.\"\n      return\n\n    @resize = ->\n      @slides.each (i, element) =>\n        slide = $ element\n        # Fit slidea videos to their containers\n        $(@settings.selector.video, @element).each (i, video)=>\n          video = $(video)\n          parent = video.parent()\n\n          if parent.is('.slidea-video-background')\n            return\n\n          height = parent.height()\n          width = parent.width()\n\n          video.css\n            width: width\n            height: height\n\n          return\n\n        # Set slide to have a full screen Video Background\n        video_background = $('.slidea-video-background', slide)\n        if video_background.length > 0\n          video = $('.video', video_background)\n\n          data_width = parseInt(video.attr('data-slidea-width'))\n          data_height = parseInt(video.attr('data-slidea-height'))\n\n          video_width = @slider_width\n          video_height = video_width * data_height / data_width\n\n          margin_left = -(video_width - (@slider_width)) / 2\n          margin_top = -(video_height - (@slider_height)) / 2\n\n          video.css\n            'width': video_width\n            'height': video_height\n            'margin-left': margin_left\n            'margin-top': margin_top\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'video', $.fn.slidea.video\n\n) window.jQuery, window, document\n"]}